2023-10-18 15:44:54:446 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE AMP (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-10-18 15:44:54:629 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE AMP (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-10-18 15:44:57:860 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT fnstmt { $inst = $fnstmt.fn }) (ALT callFunction { $inst = $callFunction.cf }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE fnstmt (returns interfaces.Instruction fn) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER FLECHA types LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) }) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) }))) (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (= list listParamsFunc) COMA parametro {
                                var arr []interface{}
                                arr = append($list.l, $parametro.p)
                                $l = arr
                            }) (ALT parametro {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE parametro (returns interfaces.Instruction p) (BLOCK (ALT ID D_PTS types { $p = instructions.NewParamsDeclaration($ID.line,$ID.pos,$ID.text, $types.ty)}) (ALT (= exte (BLOCK (ALT GUIONBAJO) (ALT ID))) ID D_PTS types { $p = instructions.NewParamsDeclaration($ID.line,$ID.pos, $ID.text, $types.ty)}))) (RULE callExp (returns interfaces.Expression cfe) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cfe = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE callFunction (returns interfaces.Instruction cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = instructions.NewCallFunc($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT ID { $ty = environment.UNKNOWN }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (= left expr) (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT callExp { $e = $callExp.cfe }) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (= list listAccessArray) CORIZQ expr CORDER {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT CORIZQ expr CORDER {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-10-18 15:44:57:881 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT fnstmt { $inst = $fnstmt.fn }) (ALT callFunction { $inst = $callFunction.cf }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE fnstmt (returns interfaces.Instruction fn) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER FLECHA types LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) }) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) }))) (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (= list listParamsFunc) COMA parametro {
                                var arr []interface{}
                                arr = append($list.l, $parametro.p)
                                $l = arr
                            }) (ALT parametro {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE parametro (returns interfaces.Instruction p) (BLOCK (ALT ID D_PTS types { $p = instructions.NewParamsDeclaration($ID.line,$ID.pos,$ID.text, $types.ty)}) (ALT (= exte (SET GUIONBAJO ID)) ID D_PTS types { $p = instructions.NewParamsDeclaration($ID.line,$ID.pos, $ID.text, $types.ty)}))) (RULE callExp (returns interfaces.Expression cfe) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cfe = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE callFunction (returns interfaces.Instruction cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = instructions.NewCallFunc($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT ID { $ty = environment.UNKNOWN }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT callExp { $e = $callExp.cfe }) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (= list listAccessArray) CORIZQ expr CORDER {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT CORIZQ expr CORDER {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-10-18 15:44:57:891 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT fnstmt { $inst = $fnstmt.fn }) (ALT callFunction { $inst = $callFunction.cf }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE fnstmt (returns interfaces.Instruction fn) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER FLECHA types LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) }) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) }))) (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (= list listParamsFunc) COMA parametro {
                                var arr []interface{}
                                arr = append($list.l, $parametro.p)
                                $l = arr
                            }) (ALT parametro {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE parametro (returns interfaces.Instruction p) (BLOCK (ALT ID D_PTS types { $p = instructions.NewParamsDeclaration($ID.line,$ID.pos,$ID.text, $types.ty)}) (ALT (= exte (SET GUIONBAJO ID)) ID D_PTS types { $p = instructions.NewParamsDeclaration($ID.line,$ID.pos, $ID.text, $types.ty)}))) (RULE callExp (returns interfaces.Expression cfe) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cfe = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE callFunction (returns interfaces.Instruction cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = instructions.NewCallFunc($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT ID { $ty = environment.UNKNOWN }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT callExp { $e = $callExp.cfe }) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (= list listAccessArray) CORIZQ expr CORDER {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT CORIZQ expr CORDER {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-10-18 15:44:57:891 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-10-18 15:44:58:068 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} l]
    :   ( {} parametro<tokenIndex=576> {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=568> parametro<tokenIndex=570> {
                                          var arr []interface{}
                                          arr = append($list.l, $parametro.p)
                                          $l = arr
                                      }
        )*
    ;
2023-10-18 15:44:58:096 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (parametro (ELEMENT_OPTIONS (= tokenIndex 576))) {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 568))) (parametro (ELEMENT_OPTIONS (= tokenIndex 570))) {
                                          var arr []interface{}
                                          arr = append($list.l, $parametro.p)
                                          $l = arr
                                      }))))))
2023-10-18 15:44:58:096 left-recursion LogManager.java:25 listParamsCall returns [[]interface{} l]
    :   ( {} expr<tokenIndex=678>  {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=670> expr<tokenIndex=672> {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }
        )*
    ;
2023-10-18 15:44:58:128 grammar LogManager.java:25 added: (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 678))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 670))) (expr (ELEMENT_OPTIONS (= tokenIndex 672))) {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }))))))
2023-10-18 15:44:58:163 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} SUB<tokenIndex=765> opDe=expr<tokenIndex=769,p=23> {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)} 
        | NOT<tokenIndex=927> right=expr<tokenIndex=931,p=14> {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)} 
        | PARIZQ<tokenIndex=937> expr<tokenIndex=939> PARDER<tokenIndex=941> { $e = $expr.e } 
        | callExp<tokenIndex=947> { $e = $callExp.cfe } 
        | types<tokenIndex=953> PARIZQ<tokenIndex=955> expr<tokenIndex=957> PARDER<tokenIndex=959> { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) } 
        | CORIZQ<tokenIndex=967> CORDER<tokenIndex=969> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) } 
        | list=listArray<tokenIndex=977> { $e = $list.p} 
        | CORIZQ<tokenIndex=983> listParams<tokenIndex=985> CORDER<tokenIndex=987> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=993>
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=999>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=1005> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=1011> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | ID<tokenIndex=1017> PUNTO<tokenIndex=1019> COUNT<tokenIndex=1021> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) } 
        | ID<tokenIndex=1027> PUNTO<tokenIndex=1029> ISEMPTY<tokenIndex=1031> { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) } 
        | NIL<tokenIndex=1037> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=(SUB_IG<tokenIndex=782>|SUM_IG<tokenIndex=784>) expr<tokenIndex=787,p=23> { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(MUL<tokenIndex=800>|DIV<tokenIndex=802>|MOD<tokenIndex=804>) right=expr<tokenIndex=809,p=22> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(ADD<tokenIndex=822>|SUB<tokenIndex=824>) right=expr<tokenIndex=829,p=21> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MAY_IG<tokenIndex=842>|MAYOR<tokenIndex=844>) right=expr<tokenIndex=849,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(MEN_IG<tokenIndex=862>|MENOR<tokenIndex=864>) right=expr<tokenIndex=869,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(IG_IG<tokenIndex=882>|DIF<tokenIndex=884>) right=expr<tokenIndex=889,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=AND<tokenIndex=901> right=expr<tokenIndex=905,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=OR<tokenIndex=917> right=expr<tokenIndex=921,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-10-18 15:44:58:268 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (SUB (ELEMENT_OPTIONS (= tokenIndex 765))) (= opDe (expr (ELEMENT_OPTIONS (= tokenIndex 769) (= p 23)))) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 927))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 931) (= p 14)))) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 937))) (expr (ELEMENT_OPTIONS (= tokenIndex 939))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 941))) { $e = $expr.e }) (ALT (callExp (ELEMENT_OPTIONS (= tokenIndex 947))) { $e = $callExp.cfe }) (ALT (types (ELEMENT_OPTIONS (= tokenIndex 953))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 955))) (expr (ELEMENT_OPTIONS (= tokenIndex 957))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 959))) { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 967))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 969))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 977)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 983))) (listParams (ELEMENT_OPTIONS (= tokenIndex 985))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 987))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 993))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 999))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 1005))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 1011))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1017))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1019))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 1021))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1027))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1029))) (ISEMPTY (ELEMENT_OPTIONS (= tokenIndex 1031))) { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 1037))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (SET (SUB_IG (ELEMENT_OPTIONS (= tokenIndex 782))) (SUM_IG (ELEMENT_OPTIONS (= tokenIndex 784))))) (expr (ELEMENT_OPTIONS (= tokenIndex 787) (= p 23))) { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 800))) (DIV (ELEMENT_OPTIONS (= tokenIndex 802))) (MOD (ELEMENT_OPTIONS (= tokenIndex 804))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 809) (= p 22)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 822))) (SUB (ELEMENT_OPTIONS (= tokenIndex 824))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 829) (= p 21)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 842))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 844))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 849) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 862))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 864))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 869) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 882))) (DIF (ELEMENT_OPTIONS (= tokenIndex 884))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 889) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 901)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 905) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 917)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 921) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-10-18 15:44:58:271 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1062> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1054> expr<tokenIndex=1056> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-10-18 15:44:58:278 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1062))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1054))) (expr (ELEMENT_OPTIONS (= tokenIndex 1056))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-10-18 15:44:58:279 left-recursion LogManager.java:25 listAccessArray returns [[]interface{} l]
    :   ( {} CORIZQ<tokenIndex=1089> expr<tokenIndex=1091> CORDER<tokenIndex=1093> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=1079> expr<tokenIndex=1081> CORDER<tokenIndex=1083> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-10-18 15:44:58:290 grammar LogManager.java:25 added: (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1089))) (expr (ELEMENT_OPTIONS (= tokenIndex 1091))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1093))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1079))) (expr (ELEMENT_OPTIONS (= tokenIndex 1081))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1083))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-10-18 15:44:58:291 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=1156> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> CORIZQ<tokenIndex=1112> expr<tokenIndex=1114> CORDER<tokenIndex=1116> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> PUNTO<tokenIndex=1128> ID<tokenIndex=1130> { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> types<tokenIndex=1142> IG<tokenIndex=1144> CORIZQ<tokenIndex=1146> expr<tokenIndex=1148> CORDER<tokenIndex=1150> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-10-18 15:44:58:377 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1156))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1112))) (expr (ELEMENT_OPTIONS (= tokenIndex 1114))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1116))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1128))) (ID (ELEMENT_OPTIONS (= tokenIndex 1130))) { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (types (ELEMENT_OPTIONS (= tokenIndex 1142))) (IG (ELEMENT_OPTIONS (= tokenIndex 1144))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1146))) (expr (ELEMENT_OPTIONS (= tokenIndex 1148))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1150))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-10-18 15:44:58:383 left-recursion LogManager.java:25 exprComa returns [interfaces.Expression t]
    :   ( {} expr<tokenIndex=1185> { $t = $expr.e } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> op=COMA<tokenIndex=1175> right=expr<tokenIndex=1179> { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }
        )*
    ;
2023-10-18 15:44:58:400 grammar LogManager.java:25 added: (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1185))) { $t = $expr.e })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (= op (COMA (ELEMENT_OPTIONS (= tokenIndex 1175)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1179)))) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }))))))
2023-10-18 15:44:58:508 grammar LogManager.java:25 import INT=1
2023-10-18 15:44:58:509 grammar LogManager.java:25 import FLOAT=2
2023-10-18 15:44:58:509 grammar LogManager.java:25 import BOOL=3
2023-10-18 15:44:58:510 grammar LogManager.java:25 import STR=4
2023-10-18 15:44:58:510 grammar LogManager.java:25 import CHAR=5
2023-10-18 15:44:58:510 grammar LogManager.java:25 import VAR=6
2023-10-18 15:44:58:510 grammar LogManager.java:25 import LET=7
2023-10-18 15:44:58:511 grammar LogManager.java:25 import VOID=8
2023-10-18 15:44:58:511 grammar LogManager.java:25 import TRU=9
2023-10-18 15:44:58:511 grammar LogManager.java:25 import FAL=10
2023-10-18 15:44:58:511 grammar LogManager.java:25 import PRINT=11
2023-10-18 15:44:58:511 grammar LogManager.java:25 import IF=12
2023-10-18 15:44:58:511 grammar LogManager.java:25 import ELSE=13
2023-10-18 15:44:58:512 grammar LogManager.java:25 import WHILE=14
2023-10-18 15:44:58:512 grammar LogManager.java:25 import FOR=15
2023-10-18 15:44:58:512 grammar LogManager.java:25 import IN=16
2023-10-18 15:44:58:512 grammar LogManager.java:25 import SWITCH=17
2023-10-18 15:44:58:513 grammar LogManager.java:25 import CASE=18
2023-10-18 15:44:58:513 grammar LogManager.java:25 import DEFAULT=19
2023-10-18 15:44:58:513 grammar LogManager.java:25 import BREAK=20
2023-10-18 15:44:58:513 grammar LogManager.java:25 import RETURN=21
2023-10-18 15:44:58:514 grammar LogManager.java:25 import CONTINUE=22
2023-10-18 15:44:58:514 grammar LogManager.java:25 import GUARD=23
2023-10-18 15:44:58:514 grammar LogManager.java:25 import FUNC=24
2023-10-18 15:44:58:514 grammar LogManager.java:25 import NIL=25
2023-10-18 15:44:58:514 grammar LogManager.java:25 import STRUCT=26
2023-10-18 15:44:58:514 grammar LogManager.java:25 import MUTATING=27
2023-10-18 15:44:58:514 grammar LogManager.java:25 import SELF=28
2023-10-18 15:44:58:514 grammar LogManager.java:25 import INOUT=29
2023-10-18 15:44:58:514 grammar LogManager.java:25 import APPEND=30
2023-10-18 15:44:58:516 grammar LogManager.java:25 import REMOVELAST=31
2023-10-18 15:44:58:516 grammar LogManager.java:25 import REMOVE=32
2023-10-18 15:44:58:516 grammar LogManager.java:25 import AT=33
2023-10-18 15:44:58:516 grammar LogManager.java:25 import ISEMPTY=34
2023-10-18 15:44:58:516 grammar LogManager.java:25 import COUNT=35
2023-10-18 15:44:58:516 grammar LogManager.java:25 import NUMBER=36
2023-10-18 15:44:58:516 grammar LogManager.java:25 import STRING=37
2023-10-18 15:44:58:516 grammar LogManager.java:25 import ID=38
2023-10-18 15:44:58:516 grammar LogManager.java:25 import DIF=39
2023-10-18 15:44:58:516 grammar LogManager.java:25 import IG_IG=40
2023-10-18 15:44:58:516 grammar LogManager.java:25 import NOT=41
2023-10-18 15:44:58:517 grammar LogManager.java:25 import OR=42
2023-10-18 15:44:58:517 grammar LogManager.java:25 import AND=43
2023-10-18 15:44:58:517 grammar LogManager.java:25 import IG=44
2023-10-18 15:44:58:517 grammar LogManager.java:25 import MAY_IG=45
2023-10-18 15:44:58:517 grammar LogManager.java:25 import MEN_IG=46
2023-10-18 15:44:58:517 grammar LogManager.java:25 import SUM_IG=47
2023-10-18 15:44:58:517 grammar LogManager.java:25 import SUB_IG=48
2023-10-18 15:44:58:518 grammar LogManager.java:25 import MAYOR=49
2023-10-18 15:44:58:518 grammar LogManager.java:25 import MENOR=50
2023-10-18 15:44:58:518 grammar LogManager.java:25 import MUL=51
2023-10-18 15:44:58:519 grammar LogManager.java:25 import DIV=52
2023-10-18 15:44:58:519 grammar LogManager.java:25 import ADD=53
2023-10-18 15:44:58:519 grammar LogManager.java:25 import SUB=54
2023-10-18 15:44:58:519 grammar LogManager.java:25 import MOD=55
2023-10-18 15:44:58:519 grammar LogManager.java:25 import PARIZQ=56
2023-10-18 15:44:58:519 grammar LogManager.java:25 import PARDER=57
2023-10-18 15:44:58:520 grammar LogManager.java:25 import LLAVEIZQ=58
2023-10-18 15:44:58:521 grammar LogManager.java:25 import LLAVEDER=59
2023-10-18 15:44:58:522 grammar LogManager.java:25 import D_PTS=60
2023-10-18 15:44:58:522 grammar LogManager.java:25 import CORIZQ=61
2023-10-18 15:44:58:522 grammar LogManager.java:25 import CORDER=62
2023-10-18 15:44:58:522 grammar LogManager.java:25 import COMA=63
2023-10-18 15:44:58:522 grammar LogManager.java:25 import PUNTO=64
2023-10-18 15:44:58:522 grammar LogManager.java:25 import COMILLA=65
2023-10-18 15:44:58:522 grammar LogManager.java:25 import FLECHA=66
2023-10-18 15:44:58:522 grammar LogManager.java:25 import GUIONBAJO=67
2023-10-18 15:44:58:523 grammar LogManager.java:25 import AMP=68
2023-10-18 15:44:58:523 grammar LogManager.java:25 import WHITESPACE=69
2023-10-18 15:44:58:525 grammar LogManager.java:25 import COMMENT=70
2023-10-18 15:44:58:526 grammar LogManager.java:25 import LINE_COMMENT=71
2023-10-18 15:44:58:526 grammar LogManager.java:25 import 'Int'=1
2023-10-18 15:44:58:526 grammar LogManager.java:25 import 'Float'=2
2023-10-18 15:44:58:527 grammar LogManager.java:25 import 'Bool'=3
2023-10-18 15:44:58:528 grammar LogManager.java:25 import 'String'=4
2023-10-18 15:44:58:528 grammar LogManager.java:25 import 'Character'=5
2023-10-18 15:44:58:528 grammar LogManager.java:25 import 'var'=6
2023-10-18 15:44:58:528 grammar LogManager.java:25 import 'let'=7
2023-10-18 15:44:58:528 grammar LogManager.java:25 import 'void'=8
2023-10-18 15:44:58:528 grammar LogManager.java:25 import 'true'=9
2023-10-18 15:44:58:528 grammar LogManager.java:25 import 'false'=10
2023-10-18 15:44:58:528 grammar LogManager.java:25 import 'print'=11
2023-10-18 15:44:58:529 grammar LogManager.java:25 import 'if'=12
2023-10-18 15:44:58:529 grammar LogManager.java:25 import 'else'=13
2023-10-18 15:44:58:529 grammar LogManager.java:25 import 'while'=14
2023-10-18 15:44:58:530 grammar LogManager.java:25 import 'for'=15
2023-10-18 15:44:58:530 grammar LogManager.java:25 import 'in'=16
2023-10-18 15:44:58:530 grammar LogManager.java:25 import 'switch'=17
2023-10-18 15:44:58:530 grammar LogManager.java:25 import 'case'=18
2023-10-18 15:44:58:530 grammar LogManager.java:25 import 'default'=19
2023-10-18 15:44:58:530 grammar LogManager.java:25 import 'break'=20
2023-10-18 15:44:58:530 grammar LogManager.java:25 import 'return'=21
2023-10-18 15:44:58:530 grammar LogManager.java:25 import 'continue'=22
2023-10-18 15:44:58:532 grammar LogManager.java:25 import 'guard'=23
2023-10-18 15:44:58:532 grammar LogManager.java:25 import 'func'=24
2023-10-18 15:44:58:532 grammar LogManager.java:25 import 'nil'=25
2023-10-18 15:44:58:532 grammar LogManager.java:25 import 'struct'=26
2023-10-18 15:44:58:532 grammar LogManager.java:25 import 'mutating'=27
2023-10-18 15:44:58:532 grammar LogManager.java:25 import 'self'=28
2023-10-18 15:44:58:532 grammar LogManager.java:25 import 'inout'=29
2023-10-18 15:44:58:532 grammar LogManager.java:25 import 'append'=30
2023-10-18 15:44:58:532 grammar LogManager.java:25 import 'removeLast'=31
2023-10-18 15:44:58:533 grammar LogManager.java:25 import 'remove'=32
2023-10-18 15:44:58:533 grammar LogManager.java:25 import 'at'=33
2023-10-18 15:44:58:533 grammar LogManager.java:25 import 'isEmpty'=34
2023-10-18 15:44:58:533 grammar LogManager.java:25 import 'count'=35
2023-10-18 15:44:58:533 grammar LogManager.java:25 import '!='=39
2023-10-18 15:44:58:533 grammar LogManager.java:25 import '=='=40
2023-10-18 15:44:58:533 grammar LogManager.java:25 import '!'=41
2023-10-18 15:44:58:533 grammar LogManager.java:25 import '||'=42
2023-10-18 15:44:58:533 grammar LogManager.java:25 import '&&'=43
2023-10-18 15:44:58:534 grammar LogManager.java:25 import '='=44
2023-10-18 15:44:58:534 grammar LogManager.java:25 import '>='=45
2023-10-18 15:44:58:534 grammar LogManager.java:25 import '<='=46
2023-10-18 15:44:58:534 grammar LogManager.java:25 import '+='=47
2023-10-18 15:44:58:534 grammar LogManager.java:25 import '-='=48
2023-10-18 15:44:58:534 grammar LogManager.java:25 import '>'=49
2023-10-18 15:44:58:534 grammar LogManager.java:25 import '<'=50
2023-10-18 15:44:58:534 grammar LogManager.java:25 import '*'=51
2023-10-18 15:44:58:534 grammar LogManager.java:25 import '/'=52
2023-10-18 15:44:58:535 grammar LogManager.java:25 import '+'=53
2023-10-18 15:44:58:535 grammar LogManager.java:25 import '-'=54
2023-10-18 15:44:58:535 grammar LogManager.java:25 import '%'=55
2023-10-18 15:44:58:535 grammar LogManager.java:25 import '('=56
2023-10-18 15:44:58:535 grammar LogManager.java:25 import ')'=57
2023-10-18 15:44:58:535 grammar LogManager.java:25 import '{'=58
2023-10-18 15:44:58:536 grammar LogManager.java:25 import '}'=59
2023-10-18 15:44:58:536 grammar LogManager.java:25 import ':'=60
2023-10-18 15:44:58:536 grammar LogManager.java:25 import '['=61
2023-10-18 15:44:58:536 grammar LogManager.java:25 import ']'=62
2023-10-18 15:44:58:536 grammar LogManager.java:25 import ','=63
2023-10-18 15:44:58:536 grammar LogManager.java:25 import '.'=64
2023-10-18 15:44:58:536 grammar LogManager.java:25 import '"'=65
2023-10-18 15:44:58:557 grammar LogManager.java:25 import '->'=66
2023-10-18 15:44:58:558 grammar LogManager.java:25 import '_'=67
2023-10-18 15:44:58:558 grammar LogManager.java:25 import '&'=68
2023-10-18 15:44:58:561 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, FLECHA=66, GUIONBAJO=67, AMP=68, WHITESPACE=69, COMMENT=70, LINE_COMMENT=71, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65, '->'=66, '_'=67, '&'=68}
2023-10-18 15:44:58:577 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, FLECHA=66, GUIONBAJO=67, AMP=68, WHITESPACE=69, COMMENT=70, LINE_COMMENT=71}
2023-10-18 15:44:58:577 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65, '->'=66, '_'=67, '&'=68}
2023-10-18 15:44:58:801 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-10-18 15:44:58:811 LL1 LogManager.java:25 look=[{11..12, 24, 38}, {<EOF>, 59}]
2023-10-18 15:44:58:812 LL1 LogManager.java:25 LL(1)? true
2023-10-18 15:44:58:812 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-10-18 15:44:58:812 LL1 LogManager.java:25 look=[11, 12, 38, 24, 38]
2023-10-18 15:44:58:812 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:813 LL1 LogManager.java:25 
DECISION 2 in rule printstmt
2023-10-18 15:44:58:813 LL1 LogManager.java:25 look=[11, 11]
2023-10-18 15:44:58:813 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:813 LL1 LogManager.java:25 
DECISION 3 in rule ifstmt
2023-10-18 15:44:58:813 LL1 LogManager.java:25 look=[12, 12, 12]
2023-10-18 15:44:58:813 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:813 LL1 LogManager.java:25 
DECISION 4 in rule declarationstmt
2023-10-18 15:44:58:813 LL1 LogManager.java:25 look=[6, 6, 6, 7, 7, 7]
2023-10-18 15:44:58:813 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:813 LL1 LogManager.java:25 
DECISION 5 in rule fnstmt
2023-10-18 15:44:58:813 LL1 LogManager.java:25 look=[24, 24]
2023-10-18 15:44:58:813 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:813 LL1 LogManager.java:25 
DECISION 6 in rule listParamsFunc
2023-10-18 15:44:58:813 LL1 LogManager.java:25 look=[{38, 67}, null]
2023-10-18 15:44:58:813 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:813 LL1 LogManager.java:25 
DECISION 7 in rule listParamsFunc
2023-10-18 15:44:58:813 LL1 LogManager.java:25 look=[null, 57]
2023-10-18 15:44:58:813 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:813 LL1 LogManager.java:25 
DECISION 8 in rule parametro
2023-10-18 15:44:58:814 LL1 LogManager.java:25 look=[38, {38, 67}]
2023-10-18 15:44:58:814 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:814 LL1 LogManager.java:25 
DECISION 9 in rule listParamsCall
2023-10-18 15:44:58:814 LL1 LogManager.java:25 look=[{1..4, 9..10, 25..26, 36..38, 41, 54, 56, 61, 65}, null]
2023-10-18 15:44:58:815 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:815 LL1 LogManager.java:25 
DECISION 10 in rule listParamsCall
2023-10-18 15:44:58:815 LL1 LogManager.java:25 look=[null, 57]
2023-10-18 15:44:58:815 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:815 LL1 LogManager.java:25 
DECISION 11 in rule types
2023-10-18 15:44:58:816 LL1 LogManager.java:25 look=[1, 2, 4, 3, 61, 65, 25, 26, 38]
2023-10-18 15:44:58:816 LL1 LogManager.java:25 LL(1)? true
2023-10-18 15:44:58:816 LL1 LogManager.java:25 
DECISION 12 in rule expr
2023-10-18 15:44:58:817 LL1 LogManager.java:25 look=[54, 41, 56, 38, {1..4, 25..26, 38, 61, 65}, 61, 38, 61, 36, 37, 9, 10, 38, 38, 25]
2023-10-18 15:44:58:817 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:817 LL1 LogManager.java:25 
DECISION 13 in rule expr
2023-10-18 15:44:58:817 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null]
2023-10-18 15:44:58:817 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:817 LL1 LogManager.java:25 
DECISION 14 in rule expr
2023-10-18 15:44:58:820 LL1 LogManager.java:25 look=[null, null]
2023-10-18 15:44:58:820 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:820 LL1 LogManager.java:25 
DECISION 15 in rule listParams
2023-10-18 15:44:58:820 LL1 LogManager.java:25 look=[null, 62]
2023-10-18 15:44:58:820 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:820 LL1 LogManager.java:25 
DECISION 16 in rule listAccessArray
2023-10-18 15:44:58:820 LL1 LogManager.java:25 look=[null, <EOF>]
2023-10-18 15:44:58:820 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:820 LL1 LogManager.java:25 
DECISION 17 in rule listArray
2023-10-18 15:44:58:820 LL1 LogManager.java:25 look=[null, null, null]
2023-10-18 15:44:58:820 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:820 LL1 LogManager.java:25 
DECISION 18 in rule listArray
2023-10-18 15:44:58:822 LL1 LogManager.java:25 look=[null, null]
2023-10-18 15:44:58:822 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:822 LL1 LogManager.java:25 
DECISION 19 in rule exprComa
2023-10-18 15:44:58:822 LL1 LogManager.java:25 look=[null, 57]
2023-10-18 15:44:58:822 LL1 LogManager.java:25 LL(1)? false
2023-10-18 15:44:58:845 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-18 15:44:58:940 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-10-18 15:44:58:941 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-10-18 15:44:58:945 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-10-18 15:44:58:951 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-10-18 15:44:58:951 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-10-18 15:44:58:963 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-10-18 15:44:58:963 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-10-18 15:44:58:963 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-10-18 15:44:58:968 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-10-18 15:44:58:968 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:14]
2023-10-18 15:44:58:968 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,40:22].[@-1,20:23='prnt',<0>,40:32]
2023-10-18 15:44:58:968 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-10-18 15:44:58:968 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:11]
2023-10-18 15:44:58:968 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,41:19].[@-1,17:22='ifinst',<0>,41:26]
2023-10-18 15:44:58:968 action-translator LogManager.java:25 translate  $inst = $assignstmt.asg 
2023-10-18 15:44:58:968 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:15]
2023-10-18 15:44:58:973 action-translator LogManager.java:25 qattr [@-1,10:19='assignstmt',<0>,44:23].[@-1,21:23='asg',<0>,44:34]
2023-10-18 15:44:58:973 action-translator LogManager.java:25 translate  $inst = $fnstmt.fn 
2023-10-18 15:44:58:973 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:11]
2023-10-18 15:44:58:973 action-translator LogManager.java:25 qattr [@-1,10:15='fnstmt',<0>,52:19].[@-1,17:18='fn',<0>,52:26]
2023-10-18 15:44:58:973 action-translator LogManager.java:25 translate  $inst = $callFunction.cf 
2023-10-18 15:44:58:975 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,53:17]
2023-10-18 15:44:58:975 action-translator LogManager.java:25 qattr [@-1,10:21='callFunction',<0>,53:25].[@-1,23:24='cf',<0>,53:38]
2023-10-18 15:44:58:978 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-10-18 15:44:58:979 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,57:29]
2023-10-18 15:44:58:979 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,57:59].[@-1,38:41='line',<0>,57:65]
2023-10-18 15:44:58:983 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,57:71].[@-1,50:52='pos',<0>,57:77]
2023-10-18 15:44:58:984 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,57:82].[@-1,60:60='e',<0>,57:87]
2023-10-18 15:44:58:985 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)
2023-10-18 15:44:58:985 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,58:33]
2023-10-18 15:44:58:986 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,58:63].[@-1,38:41='line',<0>,58:69]
2023-10-18 15:44:58:986 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,58:75].[@-1,50:52='pos',<0>,58:81]
2023-10-18 15:44:58:988 action-translator LogManager.java:25 qattr [@-1,55:62='exprComa',<0>,58:86].[@-1,64:64='t',<0>,58:95]
2023-10-18 15:44:58:995 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-10-18 15:44:58:995 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,62:40]
2023-10-18 15:44:58:996 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,62:69].[@-1,34:37='line',<0>,62:72]
2023-10-18 15:44:58:996 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,62:79].[@-1,44:46='pos',<0>,62:82]
2023-10-18 15:44:58:997 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,62:88].[@-1,55:55='e',<0>,62:93]
2023-10-18 15:44:58:998 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,62:97].[@-1,65:67='blk',<0>,62:103]
2023-10-18 15:44:59:000 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) 
2023-10-18 15:44:59:000 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,63:75]
2023-10-18 15:44:59:000 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,63:104].[@-1,34:37='line',<0>,63:107]
2023-10-18 15:44:59:001 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,63:114].[@-1,44:46='pos',<0>,63:117]
2023-10-18 15:44:59:001 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,63:123].[@-1,55:55='e',<0>,63:128]
2023-10-18 15:44:59:002 action-translator LogManager.java:25 qattr [@-1,59:60='e1',<0>,63:132].[@-1,62:64='blk',<0>,63:135]
2023-10-18 15:44:59:002 action-translator LogManager.java:25 qattr [@-1,68:69='e2',<0>,63:141].[@-1,71:73='blk',<0>,63:144]
2023-10-18 15:44:59:004 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) 
2023-10-18 15:44:59:005 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,64:52]
2023-10-18 15:44:59:007 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,64:81].[@-1,34:37='line',<0>,64:84]
2023-10-18 15:44:59:008 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,64:91].[@-1,44:46='pos',<0>,64:94]
2023-10-18 15:44:59:008 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,64:100].[@-1,55:55='e',<0>,64:105]
2023-10-18 15:44:59:008 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,64:109].[@-1,65:67='blk',<0>,64:115]
2023-10-18 15:44:59:009 action-translator LogManager.java:25 qattr [@-1,85:90='ifstmt',<0>,64:135].[@-1,92:97='ifinst',<0>,64:142]
2023-10-18 15:44:59:029 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) 
2023-10-18 15:44:59:030 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,72:32]
2023-10-18 15:44:59:030 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,72:67].[@-1,41:44='line',<0>,72:71]
2023-10-18 15:44:59:031 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,72:78].[@-1,52:54='pos',<0>,72:82]
2023-10-18 15:44:59:031 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,72:88].[@-1,61:64='text',<0>,72:91]
2023-10-18 15:44:59:031 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,72:98].[@-1,74:75='ty',<0>,72:104]
2023-10-18 15:44:59:033 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,72:109].[@-1,84:84='e',<0>,72:114]
2023-10-18 15:44:59:034 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) 
2023-10-18 15:44:59:034 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,73:19]
2023-10-18 15:44:59:034 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,73:54].[@-1,41:44='line',<0>,73:58]
2023-10-18 15:44:59:035 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,73:65].[@-1,52:54='pos',<0>,73:69]
2023-10-18 15:44:59:036 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,73:75].[@-1,61:64='text',<0>,73:78]
2023-10-18 15:44:59:036 action-translator LogManager.java:25 qattr [@-1,89:92='expr',<0>,73:106].[@-1,94:94='e',<0>,73:111]
2023-10-18 15:44:59:038 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) 
2023-10-18 15:44:59:038 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,74:24]
2023-10-18 15:44:59:038 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,74:59].[@-1,41:44='line',<0>,74:63]
2023-10-18 15:44:59:038 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,74:70].[@-1,52:54='pos',<0>,74:74]
2023-10-18 15:44:59:038 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,74:80].[@-1,61:64='text',<0>,74:83]
2023-10-18 15:44:59:038 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,74:90].[@-1,74:75='ty',<0>,74:96]
2023-10-18 15:44:59:038 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) 
2023-10-18 15:44:59:038 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,75:32]
2023-10-18 15:44:59:038 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,75:67].[@-1,41:44='line',<0>,75:71]
2023-10-18 15:44:59:038 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,75:78].[@-1,52:54='pos',<0>,75:82]
2023-10-18 15:44:59:043 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,75:88].[@-1,61:64='text',<0>,75:91]
2023-10-18 15:44:59:043 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,75:98].[@-1,74:75='ty',<0>,75:104]
2023-10-18 15:44:59:043 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,75:109].[@-1,84:84='e',<0>,75:114]
2023-10-18 15:44:59:043 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) 
2023-10-18 15:44:59:043 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,76:24]
2023-10-18 15:44:59:043 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,76:59].[@-1,41:44='line',<0>,76:63]
2023-10-18 15:44:59:043 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,76:70].[@-1,52:54='pos',<0>,76:74]
2023-10-18 15:44:59:048 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,76:80].[@-1,61:64='text',<0>,76:83]
2023-10-18 15:44:59:048 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,76:90].[@-1,74:75='ty',<0>,76:96]
2023-10-18 15:44:59:048 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) 
2023-10-18 15:44:59:048 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,77:19]
2023-10-18 15:44:59:048 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,77:54].[@-1,41:44='line',<0>,77:58]
2023-10-18 15:44:59:048 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,77:65].[@-1,52:54='pos',<0>,77:69]
2023-10-18 15:44:59:048 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,77:75].[@-1,61:64='text',<0>,77:78]
2023-10-18 15:44:59:048 action-translator LogManager.java:25 qattr [@-1,89:92='expr',<0>,77:106].[@-1,94:94='e',<0>,77:111]
2023-10-18 15:44:59:053 action-translator LogManager.java:25 translate  $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-10-18 15:44:59:054 action-translator LogManager.java:25 attr [@-1,2:4='asg',<0>,81:18]
2023-10-18 15:44:59:054 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,81:48].[@-1,35:38='line',<0>,81:51]
2023-10-18 15:44:59:054 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,81:58].[@-1,45:47='pos',<0>,81:61]
2023-10-18 15:44:59:055 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,81:67].[@-1,54:57='text',<0>,81:70]
2023-10-18 15:44:59:055 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,81:77].[@-1,66:66='e',<0>,81:82]
2023-10-18 15:44:59:059 action-translator LogManager.java:25 translate  $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) 
2023-10-18 15:44:59:059 action-translator LogManager.java:25 attr [@-1,2:3='fn',<0>,185:78]
2023-10-18 15:44:59:061 action-translator LogManager.java:25 qattr [@-1,33:36='FUNC',<0>,185:109].[@-1,38:41='line',<0>,185:114]
2023-10-18 15:44:59:061 action-translator LogManager.java:25 qattr [@-1,45:48='FUNC',<0>,185:121].[@-1,50:52='pos',<0>,185:126]
2023-10-18 15:44:59:061 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,185:132].[@-1,59:62='text',<0>,185:135]
2023-10-18 15:44:59:062 action-translator LogManager.java:25 qattr [@-1,66:79='listParamsFunc',<0>,185:142].[@-1,81:81='l',<0>,185:157]
2023-10-18 15:44:59:063 action-translator LogManager.java:25 qattr [@-1,85:89='types',<0>,185:161].[@-1,91:92='ty',<0>,185:167]
2023-10-18 15:44:59:063 action-translator LogManager.java:25 qattr [@-1,96:100='block',<0>,185:172].[@-1,102:104='blk',<0>,185:178]
2023-10-18 15:44:59:064 action-translator LogManager.java:25 translate  $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) 
2023-10-18 15:44:59:064 action-translator LogManager.java:25 attr [@-1,2:3='fn',<0>,186:65]
2023-10-18 15:44:59:064 action-translator LogManager.java:25 qattr [@-1,33:36='FUNC',<0>,186:96].[@-1,38:41='line',<0>,186:101]
2023-10-18 15:44:59:065 action-translator LogManager.java:25 qattr [@-1,45:48='FUNC',<0>,186:108].[@-1,50:52='pos',<0>,186:113]
2023-10-18 15:44:59:065 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,186:119].[@-1,59:62='text',<0>,186:122]
2023-10-18 15:44:59:066 action-translator LogManager.java:25 qattr [@-1,66:79='listParamsFunc',<0>,186:129].[@-1,81:81='l',<0>,186:144]
2023-10-18 15:44:59:066 action-translator LogManager.java:25 qattr [@-1,102:106='block',<0>,186:165].[@-1,108:110='blk',<0>,186:171]
2023-10-18 15:44:59:069 action-translator LogManager.java:25 translate 
2023-10-18 15:44:59:069 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        
2023-10-18 15:44:59:069 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-18 15:44:59:069 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-18 15:44:59:069 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-18 15:44:59:071 action-translator LogManager.java:25 qattr [@-1,65:73='parametro',<0>,4:29].[@-1,75:75='p',<0>,4:39]
2023-10-18 15:44:59:071 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-18 15:44:59:071 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-10-18 15:44:59:073 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-18 15:44:59:074 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $parametro.p)
                                          $l = arr
                                      
2023-10-18 15:44:59:074 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,13:56].[@-1,128:128='l',<0>,13:61]
2023-10-18 15:44:59:074 action-translator LogManager.java:25 qattr [@-1,132:140='parametro',<0>,13:65].[@-1,142:142='p',<0>,13:75]
2023-10-18 15:44:59:075 action-translator LogManager.java:25 attr [@-1,189:189='l',<0>,14:43]
2023-10-18 15:44:59:079 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-18 15:44:59:081 action-translator LogManager.java:25 translate  $p = instructions.NewParamsDeclaration($ID.line,$ID.pos,$ID.text, $types.ty)
2023-10-18 15:44:59:081 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,205:20]
2023-10-18 15:44:59:083 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,205:59].[@-1,44:47='line',<0>,205:62]
2023-10-18 15:44:59:083 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,205:68].[@-1,53:55='pos',<0>,205:71]
2023-10-18 15:44:59:083 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,205:76].[@-1,61:64='text',<0>,205:79]
2023-10-18 15:44:59:090 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,205:86].[@-1,74:75='ty',<0>,205:92]
2023-10-18 15:44:59:093 action-translator LogManager.java:25 translate  $p = instructions.NewParamsDeclaration($ID.line,$ID.pos, $ID.text, $types.ty)
2023-10-18 15:44:59:093 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,206:39]
2023-10-18 15:44:59:094 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,206:78].[@-1,44:47='line',<0>,206:81]
2023-10-18 15:44:59:095 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,206:87].[@-1,53:55='pos',<0>,206:90]
2023-10-18 15:44:59:096 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,206:96].[@-1,62:65='text',<0>,206:99]
2023-10-18 15:44:59:096 action-translator LogManager.java:25 qattr [@-1,69:73='types',<0>,206:106].[@-1,75:76='ty',<0>,206:112]
2023-10-18 15:44:59:099 action-translator LogManager.java:25 translate  $cfe = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-10-18 15:44:59:099 action-translator LogManager.java:25 attr [@-1,2:4='cfe',<0>,210:36]
2023-10-18 15:44:59:099 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,210:66].[@-1,35:38='line',<0>,210:69]
2023-10-18 15:44:59:100 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,210:76].[@-1,45:47='pos',<0>,210:79]
2023-10-18 15:44:59:100 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,210:85].[@-1,54:57='text',<0>,210:88]
2023-10-18 15:44:59:101 action-translator LogManager.java:25 qattr [@-1,61:74='listParamsCall',<0>,210:95].[@-1,76:76='l',<0>,210:110]
2023-10-18 15:44:59:103 action-translator LogManager.java:25 translate  $cf = instructions.NewCallFunc($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-10-18 15:44:59:103 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,214:36]
2023-10-18 15:44:59:103 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,214:67].[@-1,36:39='line',<0>,214:70]
2023-10-18 15:44:59:103 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,214:77].[@-1,46:48='pos',<0>,214:80]
2023-10-18 15:44:59:104 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,214:86].[@-1,55:58='text',<0>,214:89]
2023-10-18 15:44:59:104 action-translator LogManager.java:25 qattr [@-1,62:75='listParamsCall',<0>,214:96].[@-1,77:77='l',<0>,214:111]
2023-10-18 15:44:59:110 action-translator LogManager.java:25 translate 
2023-10-18 15:44:59:111 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-18 15:44:59:112 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-18 15:44:59:112 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-18 15:44:59:112 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-18 15:44:59:113 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-18 15:44:59:113 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-18 15:44:59:113 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-10-18 15:44:59:115 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-18 15:44:59:116 action-translator LogManager.java:25 translate 
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          
2023-10-18 15:44:59:116 action-translator LogManager.java:25 qattr [@-1,131:134='list',<0>,13:60].[@-1,136:136='l',<0>,13:65]
2023-10-18 15:44:59:116 action-translator LogManager.java:25 qattr [@-1,140:143='expr',<0>,13:69].[@-1,145:145='e',<0>,13:74]
2023-10-18 15:44:59:116 action-translator LogManager.java:25 attr [@-1,196:196='l',<0>,14:47]
2023-10-18 15:44:59:116 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-18 15:44:59:123 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-10-18 15:44:59:123 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,234:8]
2023-10-18 15:44:59:126 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-10-18 15:44:59:128 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,235:10]
2023-10-18 15:44:59:129 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-10-18 15:44:59:130 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,236:8]
2023-10-18 15:44:59:130 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-10-18 15:44:59:130 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,237:9]
2023-10-18 15:44:59:131 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-10-18 15:44:59:131 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,238:24]
2023-10-18 15:44:59:132 action-translator LogManager.java:25 translate  $ty = environment.STR 
2023-10-18 15:44:59:133 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,239:24]
2023-10-18 15:44:59:133 action-translator LogManager.java:25 translate  $ty = environment.NIL 
2023-10-18 15:44:59:133 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,240:8]
2023-10-18 15:44:59:135 action-translator LogManager.java:25 translate  $ty = environment.STRUCT 
2023-10-18 15:44:59:136 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,241:11]
2023-10-18 15:44:59:136 action-translator LogManager.java:25 translate  $ty = environment.UNKNOWN 
2023-10-18 15:44:59:136 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,242:7]
2023-10-18 15:44:59:150 action-translator LogManager.java:25 translate 
2023-10-18 15:44:59:153 action-translator LogManager.java:25 translate $e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)
2023-10-18 15:44:59:155 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,2:65]
2023-10-18 15:44:59:155 action-translator LogManager.java:25 qattr [@-1,31:33='SUB',<0>,2:95].[@-1,35:38='line',<0>,2:99]
2023-10-18 15:44:59:156 action-translator LogManager.java:25 qattr [@-1,41:43='SUB',<0>,2:105].[@-1,45:47='pos',<0>,2:109]
2023-10-18 15:44:59:158 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,2:114].[@-1,55:55='e',<0>,2:119]
2023-10-18 15:44:59:159 action-translator LogManager.java:25 translate $e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)
2023-10-18 15:44:59:159 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,3:63]
2023-10-18 15:44:59:160 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:93].[@-1,35:38='line',<0>,3:97]
2023-10-18 15:44:59:160 action-translator LogManager.java:25 qattr [@-1,42:44='NOT',<0>,3:104].[@-1,46:48='pos',<0>,3:108]
2023-10-18 15:44:59:161 action-translator LogManager.java:25 qattr [@-1,52:56='right',<0>,3:114].[@-1,58:58='e',<0>,3:120]
2023-10-18 15:44:59:161 action-translator LogManager.java:25 qattr [@-1,62:64='NOT',<0>,3:124].[@-1,66:69='text',<0>,3:128]
2023-10-18 15:44:59:163 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-10-18 15:44:59:163 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:79]
2023-10-18 15:44:59:164 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:84].[@-1,12:12='e',<0>,4:89]
2023-10-18 15:44:59:165 action-translator LogManager.java:25 translate  $e = $callExp.cfe 
2023-10-18 15:44:59:165 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:36]
2023-10-18 15:44:59:166 action-translator LogManager.java:25 qattr [@-1,7:13='callExp',<0>,5:41].[@-1,15:17='cfe',<0>,5:49]
2023-10-18 15:44:59:169 action-translator LogManager.java:25 translate  $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) 
2023-10-18 15:44:59:169 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:101]
2023-10-18 15:44:59:170 action-translator LogManager.java:25 qattr [@-1,27:31='types',<0>,6:126].[@-1,33:37='start',<0>,6:132]
2023-10-18 15:44:59:171 action-translator LogManager.java:25 qattr [@-1,51:55='types',<0>,6:150].[@-1,57:61='start',<0>,6:156]
2023-10-18 15:44:59:171 action-translator LogManager.java:25 qattr [@-1,77:81='types',<0>,6:176].[@-1,83:84='ty',<0>,6:182]
2023-10-18 15:44:59:171 action-translator LogManager.java:25 qattr [@-1,88:91='expr',<0>,6:187].[@-1,93:93='e',<0>,6:192]
2023-10-18 15:44:59:173 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) 
2023-10-18 15:44:59:173 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:58]
2023-10-18 15:44:59:173 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,7:84].[@-1,35:38='line',<0>,7:91]
2023-10-18 15:44:59:174 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,7:98].[@-1,49:51='pos',<0>,7:105]
2023-10-18 15:44:59:175 action-translator LogManager.java:25 translate  $e = $list.p
2023-10-18 15:44:59:175 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:43]
2023-10-18 15:44:59:176 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,8:48].[@-1,12:12='p',<0>,8:53]
2023-10-18 15:44:59:178 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-10-18 15:44:59:179 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,9:85]
2023-10-18 15:44:59:179 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,9:111].[@-1,35:38='line',<0>,9:118]
2023-10-18 15:44:59:180 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,9:125].[@-1,49:51='pos',<0>,9:132]
2023-10-18 15:44:59:180 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,9:138].[@-1,66:66='l',<0>,9:149]
2023-10-18 15:44:59:182 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-10-18 15:44:59:182 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,12:30].[@-1,39:42='text',<0>,12:37]
2023-10-18 15:44:59:182 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,13:43].[@-1,102:105='text',<0>,13:50]
2023-10-18 15:44:59:183 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,17:13]
2023-10-18 15:44:59:183 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,17:43].[@-1,240:243='line',<0>,17:50]
2023-10-18 15:44:59:183 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,17:56].[@-1,253:255='pos',<0>,17:63]
2023-10-18 15:44:59:183 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,19:37].[@-1,341:344='text',<0>,19:44]
2023-10-18 15:44:59:188 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,23:13]
2023-10-18 15:44:59:188 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,23:43].[@-1,474:477='line',<0>,23:50]
2023-10-18 15:44:59:188 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,23:56].[@-1,487:489='pos',<0>,23:63]
2023-10-18 15:44:59:189 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-10-18 15:44:59:189 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,28:16].[@-1,25:28='text',<0>,28:23]
2023-10-18 15:44:59:190 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,29:9]
2023-10-18 15:44:59:190 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,29:39].[@-1,77:80='line',<0>,29:46]
2023-10-18 15:44:59:190 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,29:53].[@-1,91:93='pos',<0>,29:60]
2023-10-18 15:44:59:191 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-10-18 15:44:59:193 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:33]
2023-10-18 15:44:59:193 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,31:63].[@-1,36:39='line',<0>,31:67]
2023-10-18 15:44:59:199 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,31:74].[@-1,47:49='pos',<0>,31:78]
2023-10-18 15:44:59:199 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-10-18 15:44:59:200 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:33]
2023-10-18 15:44:59:210 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,32:63].[@-1,36:39='line',<0>,32:67]
2023-10-18 15:44:59:210 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,32:74].[@-1,47:49='pos',<0>,32:78]
2023-10-18 15:44:59:211 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) 
2023-10-18 15:44:59:211 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:78]
2023-10-18 15:44:59:211 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,33:104].[@-1,31:34='line',<0>,33:107]
2023-10-18 15:44:59:214 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,33:114].[@-1,41:43='pos',<0>,33:117]
2023-10-18 15:44:59:215 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,33:123].[@-1,50:53='text',<0>,33:126]
2023-10-18 15:44:59:216 action-translator LogManager.java:25 translate  $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) 
2023-10-18 15:44:59:218 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:80]
2023-10-18 15:44:59:218 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,34:108].[@-1,33:36='line',<0>,34:111]
2023-10-18 15:44:59:218 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,34:118].[@-1,43:45='pos',<0>,34:121]
2023-10-18 15:44:59:219 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,34:127].[@-1,52:55='text',<0>,34:130]
2023-10-18 15:44:59:219 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) 
2023-10-18 15:44:59:219 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:33]
2023-10-18 15:44:59:219 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,35:63].[@-1,36:39='line',<0>,35:67]
2023-10-18 15:44:59:220 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,35:74].[@-1,47:49='pos',<0>,35:78]
2023-10-18 15:44:59:220 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-10-18 15:44:59:221 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) 
2023-10-18 15:44:59:221 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:139]
2023-10-18 15:44:59:221 action-translator LogManager.java:25 qattr [@-1,32:33='op',<0>,38:169].[@-1,35:38='line',<0>,38:172]
2023-10-18 15:44:59:221 action-translator LogManager.java:25 qattr [@-1,42:43='op',<0>,38:179].[@-1,45:47='pos',<0>,38:182]
2023-10-18 15:44:59:223 action-translator LogManager.java:25 qattr [@-1,56:57='op',<0>,38:193].[@-1,59:62='text',<0>,38:196]
2023-10-18 15:44:59:223 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,38:203].[@-1,71:71='e',<0>,38:208]
2023-10-18 15:44:59:228 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-10-18 15:44:59:229 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-18 15:44:59:229 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:169]
2023-10-18 15:44:59:229 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:199].[@-1,37:41='start',<0>,39:204]
2023-10-18 15:44:59:229 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:222].[@-1,60:64='start',<0>,39:227]
2023-10-18 15:44:59:230 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:247].[@-1,85:85='e',<0>,39:252]
2023-10-18 15:44:59:230 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:256].[@-1,92:95='text',<0>,39:259]
2023-10-18 15:44:59:230 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:266].[@-1,105:105='e',<0>,39:272]
2023-10-18 15:44:59:230 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-10-18 15:44:59:232 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-18 15:44:59:232 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:149]
2023-10-18 15:44:59:232 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:179].[@-1,37:41='start',<0>,40:184]
2023-10-18 15:44:59:232 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:202].[@-1,60:64='start',<0>,40:207]
2023-10-18 15:44:59:233 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:227].[@-1,85:85='e',<0>,40:232]
2023-10-18 15:44:59:233 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:236].[@-1,92:95='text',<0>,40:239]
2023-10-18 15:44:59:233 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:246].[@-1,105:105='e',<0>,40:252]
2023-10-18 15:44:59:233 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-10-18 15:44:59:234 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-18 15:44:59:234 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:154]
2023-10-18 15:44:59:235 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:184].[@-1,37:41='start',<0>,41:189]
2023-10-18 15:44:59:235 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:207].[@-1,60:64='start',<0>,41:212]
2023-10-18 15:44:59:235 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:232].[@-1,85:85='e',<0>,41:237]
2023-10-18 15:44:59:235 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:241].[@-1,92:95='text',<0>,41:244]
2023-10-18 15:44:59:236 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:251].[@-1,105:105='e',<0>,41:257]
2023-10-18 15:44:59:236 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-10-18 15:44:59:237 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-18 15:44:59:237 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:154]
2023-10-18 15:44:59:239 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:184].[@-1,37:41='start',<0>,42:189]
2023-10-18 15:44:59:239 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:207].[@-1,60:64='start',<0>,42:212]
2023-10-18 15:44:59:239 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:232].[@-1,85:85='e',<0>,42:237]
2023-10-18 15:44:59:240 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:241].[@-1,92:95='text',<0>,42:244]
2023-10-18 15:44:59:240 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:251].[@-1,105:105='e',<0>,42:257]
2023-10-18 15:44:59:240 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-10-18 15:44:59:241 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-18 15:44:59:241 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:151]
2023-10-18 15:44:59:241 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:181].[@-1,37:41='start',<0>,43:186]
2023-10-18 15:44:59:243 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:204].[@-1,60:64='start',<0>,43:209]
2023-10-18 15:44:59:243 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:229].[@-1,85:85='e',<0>,43:234]
2023-10-18 15:44:59:243 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:238].[@-1,92:95='text',<0>,43:241]
2023-10-18 15:44:59:248 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:248].[@-1,105:105='e',<0>,43:254]
2023-10-18 15:44:59:249 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-10-18 15:44:59:249 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-18 15:44:59:250 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,44:127]
2023-10-18 15:44:59:250 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,44:157].[@-1,37:41='start',<0>,44:162]
2023-10-18 15:44:59:251 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,44:180].[@-1,60:64='start',<0>,44:185]
2023-10-18 15:44:59:251 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,44:205].[@-1,85:85='e',<0>,44:210]
2023-10-18 15:44:59:252 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,44:214].[@-1,92:95='text',<0>,44:217]
2023-10-18 15:44:59:252 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,44:224].[@-1,105:105='e',<0>,44:230]
2023-10-18 15:44:59:252 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-18 15:44:59:253 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-18 15:44:59:253 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,45:126]
2023-10-18 15:44:59:253 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,45:156].[@-1,37:41='start',<0>,45:161]
2023-10-18 15:44:59:254 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,45:179].[@-1,60:64='start',<0>,45:184]
2023-10-18 15:44:59:254 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,45:204].[@-1,85:85='e',<0>,45:209]
2023-10-18 15:44:59:254 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,45:213].[@-1,92:95='text',<0>,45:216]
2023-10-18 15:44:59:254 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,45:223].[@-1,105:105='e',<0>,45:229]
2023-10-18 15:44:59:255 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-10-18 15:44:59:255 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-10-18 15:44:59:255 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-10-18 15:44:59:255 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-10-18 15:44:59:255 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-10-18 15:44:59:258 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-10-18 15:44:59:258 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-10-18 15:44:59:258 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-18 15:44:59:261 action-translator LogManager.java:25 translate 
2023-10-18 15:44:59:262 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-18 15:44:59:262 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-18 15:44:59:262 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-18 15:44:59:262 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-18 15:44:59:263 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-18 15:44:59:264 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-18 15:44:59:264 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-10-18 15:44:59:265 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-10-18 15:44:59:266 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-10-18 15:44:59:266 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-10-18 15:44:59:267 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-18 15:44:59:269 action-translator LogManager.java:25 translate 
2023-10-18 15:44:59:269 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-18 15:44:59:270 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-18 15:44:59:270 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-18 15:44:59:270 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-18 15:44:59:270 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-18 15:44:59:270 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-18 15:44:59:271 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-10-18 15:44:59:271 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-10-18 15:44:59:271 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-10-18 15:44:59:272 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-10-18 15:44:59:272 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-18 15:44:59:274 action-translator LogManager.java:25 translate 
2023-10-18 15:44:59:275 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-10-18 15:44:59:275 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2023-10-18 15:44:59:275 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:63].[@-1,33:36='line',<0>,2:66]
2023-10-18 15:44:59:276 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:73].[@-1,43:45='pos',<0>,2:76]
2023-10-18 15:44:59:276 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:82].[@-1,52:55='text',<0>,2:85]
2023-10-18 15:44:59:277 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-10-18 15:44:59:278 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-10-18 15:44:59:278 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:130]
2023-10-18 15:44:59:278 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:162].[@-1,39:43='start',<0>,5:167]
2023-10-18 15:44:59:279 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:185].[@-1,62:66='start',<0>,5:190]
2023-10-18 15:44:59:279 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:210].[@-1,87:87='p',<0>,5:215]
2023-10-18 15:44:59:279 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:219].[@-1,96:96='e',<0>,5:224]
2023-10-18 15:44:59:280 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-18 15:44:59:281 action-translator LogManager.java:25 translate  $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  
2023-10-18 15:44:59:281 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:113]
2023-10-18 15:44:59:281 action-translator LogManager.java:25 qattr [@-1,35:38='list',<0>,6:146].[@-1,40:44='start',<0>,6:151]
2023-10-18 15:44:59:281 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,6:169].[@-1,63:67='start',<0>,6:174]
2023-10-18 15:44:59:281 action-translator LogManager.java:25 qattr [@-1,83:86='list',<0>,6:194].[@-1,88:88='p',<0>,6:199]
2023-10-18 15:44:59:281 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,6:203].[@-1,95:98='text',<0>,6:206]
2023-10-18 15:44:59:283 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-18 15:44:59:284 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-10-18 15:44:59:285 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,7:183]
2023-10-18 15:44:59:285 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,7:215].[@-1,39:43='start',<0>,7:220]
2023-10-18 15:44:59:285 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,7:238].[@-1,62:66='start',<0>,7:243]
2023-10-18 15:44:59:288 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,7:263].[@-1,87:87='p',<0>,7:268]
2023-10-18 15:44:59:288 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,7:272].[@-1,96:96='e',<0>,7:277]
2023-10-18 15:44:59:289 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-10-18 15:44:59:289 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-18 15:44:59:289 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-18 15:44:59:290 action-translator LogManager.java:25 translate 
2023-10-18 15:44:59:291 action-translator LogManager.java:25 translate  $t = $expr.e 
2023-10-18 15:44:59:291 action-translator LogManager.java:25 attr [@-1,2:2='t',<0>,2:37]
2023-10-18 15:44:59:291 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:42].[@-1,12:12='e',<0>,2:47]
2023-10-18 15:44:59:291 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-18 15:44:59:293 action-translator LogManager.java:25 translate  $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) 
2023-10-18 15:44:59:293 action-translator LogManager.java:25 attr [@-1,2:2='t',<0>,5:113]
2023-10-18 15:44:59:293 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,5:143].[@-1,37:41='start',<0>,5:148]
2023-10-18 15:44:59:293 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,5:166].[@-1,60:64='start',<0>,5:171]
2023-10-18 15:44:59:293 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,5:191].[@-1,85:85='t',<0>,5:196]
2023-10-18 15:44:59:294 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,5:200].[@-1,92:95='text',<0>,5:203]
2023-10-18 15:44:59:294 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,5:210].[@-1,105:105='e',<0>,5:216]
2023-10-18 15:44:59:294 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-18 15:45:00:837 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-18 15:45:00:838 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-18 15:45:01:025 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-18 15:45:01:025 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

