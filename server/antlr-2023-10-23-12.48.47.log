2023-10-23 12:48:40:777 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE AMP (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-10-23 12:48:40:918 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE AMP (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-10-23 12:48:43:494 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnstmt { $inst = $fnstmt.fn }) (ALT callFunction { $inst = $callFunction.cf }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE fnstmt (returns interfaces.Instruction fn) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER FLECHA types LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) }) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) }))) (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (= list listParamsFunc) COMA parametro {
                                var arr []interface{}
                                arr = append($list.l, $parametro.p)
                                $l = arr
                            }) (ALT parametro {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE parametro (returns interfaces.Instruction p) (BLOCK (ALT ID D_PTS types { $p = instructions.NewParamsDeclaration($ID.line,$ID.pos,$ID.text, $types.ty)}) (ALT (= exte (BLOCK (ALT GUIONBAJO) (ALT ID))) ID D_PTS types { $p = instructions.NewParamsDeclaration($ID.line,$ID.pos, $ID.text, $types.ty)}))) (RULE callExp (returns interfaces.Expression cfe) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cfe = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE callFunction (returns interfaces.Instruction cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = instructions.NewCallFunc($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT ID { $ty = environment.UNKNOWN }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (= expuno expr) PUNTO PUNTO PUNTO (= expdos expr) { $e = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.e, $expdos.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT callExp { $e = $callExp.cfe }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (= list listAccessArray) CORIZQ expr CORDER {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT CORIZQ expr CORDER {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-10-23 12:48:43:536 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnstmt { $inst = $fnstmt.fn }) (ALT callFunction { $inst = $callFunction.cf }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE fnstmt (returns interfaces.Instruction fn) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER FLECHA types LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) }) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) }))) (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (= list listParamsFunc) COMA parametro {
                                var arr []interface{}
                                arr = append($list.l, $parametro.p)
                                $l = arr
                            }) (ALT parametro {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE parametro (returns interfaces.Instruction p) (BLOCK (ALT ID D_PTS types { $p = instructions.NewParamsDeclaration($ID.line,$ID.pos,$ID.text, $types.ty)}) (ALT (= exte (SET GUIONBAJO ID)) ID D_PTS types { $p = instructions.NewParamsDeclaration($ID.line,$ID.pos, $ID.text, $types.ty)}))) (RULE callExp (returns interfaces.Expression cfe) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cfe = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE callFunction (returns interfaces.Instruction cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = instructions.NewCallFunc($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT ID { $ty = environment.UNKNOWN }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (= expuno expr) PUNTO PUNTO PUNTO (= expdos expr) { $e = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.e, $expdos.e) }) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT callExp { $e = $callExp.cfe }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (= list listAccessArray) CORIZQ expr CORDER {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT CORIZQ expr CORDER {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-10-23 12:48:43:561 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnstmt { $inst = $fnstmt.fn }) (ALT callFunction { $inst = $callFunction.cf }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE fnstmt (returns interfaces.Instruction fn) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER FLECHA types LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) }) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) }))) (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (= list listParamsFunc) COMA parametro {
                                var arr []interface{}
                                arr = append($list.l, $parametro.p)
                                $l = arr
                            }) (ALT parametro {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE parametro (returns interfaces.Instruction p) (BLOCK (ALT ID D_PTS types { $p = instructions.NewParamsDeclaration($ID.line,$ID.pos,$ID.text, $types.ty)}) (ALT (= exte (SET GUIONBAJO ID)) ID D_PTS types { $p = instructions.NewParamsDeclaration($ID.line,$ID.pos, $ID.text, $types.ty)}))) (RULE callExp (returns interfaces.Expression cfe) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cfe = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE callFunction (returns interfaces.Instruction cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = instructions.NewCallFunc($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT ID { $ty = environment.UNKNOWN }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (= expuno expr) PUNTO PUNTO PUNTO (= expdos expr) { $e = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.e, $expdos.e) }) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT callExp { $e = $callExp.cfe }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (= list listAccessArray) CORIZQ expr CORDER {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT CORIZQ expr CORDER {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-10-23 12:48:43:561 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-10-23 12:48:43:697 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} l]
    :   ( {} parametro<tokenIndex=657> {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=649> parametro<tokenIndex=651> {
                                          var arr []interface{}
                                          arr = append($list.l, $parametro.p)
                                          $l = arr
                                      }
        )*
    ;
2023-10-23 12:48:43:783 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (parametro (ELEMENT_OPTIONS (= tokenIndex 657))) {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 649))) (parametro (ELEMENT_OPTIONS (= tokenIndex 651))) {
                                          var arr []interface{}
                                          arr = append($list.l, $parametro.p)
                                          $l = arr
                                      }))))))
2023-10-23 12:48:43:797 left-recursion LogManager.java:25 listParamsCall returns [[]interface{} l]
    :   ( {} expr<tokenIndex=759>  {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=751> expr<tokenIndex=753> {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }
        )*
    ;
2023-10-23 12:48:43:813 grammar LogManager.java:25 added: (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 759))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 751))) (expr (ELEMENT_OPTIONS (= tokenIndex 753))) {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }))))))
2023-10-23 12:48:43:847 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} SUB<tokenIndex=846> opDe=expr<tokenIndex=850,p=21> {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)} 
        | NOT<tokenIndex=1026> right=expr<tokenIndex=1030,p=11> {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)} 
        | PARIZQ<tokenIndex=1036> expr<tokenIndex=1038> PARDER<tokenIndex=1040> { $e = $expr.e } 
        | callExp<tokenIndex=1046> { $e = $callExp.cfe } 
        | CORIZQ<tokenIndex=1056> CORDER<tokenIndex=1058> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) } 
        | list=listArray<tokenIndex=1066> { $e = $list.p} 
        | CORIZQ<tokenIndex=1072> listParams<tokenIndex=1074> CORDER<tokenIndex=1076> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=1082>
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=1088>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=1094> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=1100> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=1110> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> PUNTO<tokenIndex=860> PUNTO<tokenIndex=862> PUNTO<tokenIndex=864> expdos=expr<tokenIndex=868,p=21> { $e = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.e, $expdos.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(SUB_IG<tokenIndex=881>|SUM_IG<tokenIndex=883>) expr<tokenIndex=886,p=20> { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(MUL<tokenIndex=899>|DIV<tokenIndex=901>|MOD<tokenIndex=903>) right=expr<tokenIndex=908,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(ADD<tokenIndex=921>|SUB<tokenIndex=923>) right=expr<tokenIndex=928,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MAY_IG<tokenIndex=941>|MAYOR<tokenIndex=943>) right=expr<tokenIndex=948,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(MEN_IG<tokenIndex=961>|MENOR<tokenIndex=963>) right=expr<tokenIndex=968,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(IG_IG<tokenIndex=981>|DIF<tokenIndex=983>) right=expr<tokenIndex=988,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=AND<tokenIndex=1000> right=expr<tokenIndex=1004,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=OR<tokenIndex=1016> right=expr<tokenIndex=1020,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-10-23 12:48:44:137 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (SUB (ELEMENT_OPTIONS (= tokenIndex 846))) (= opDe (expr (ELEMENT_OPTIONS (= tokenIndex 850) (= p 21)))) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 1026))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1030) (= p 11)))) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1036))) (expr (ELEMENT_OPTIONS (= tokenIndex 1038))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1040))) { $e = $expr.e }) (ALT (callExp (ELEMENT_OPTIONS (= tokenIndex 1046))) { $e = $callExp.cfe }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1056))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1058))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 1066)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1072))) (listParams (ELEMENT_OPTIONS (= tokenIndex 1074))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1076))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 1082))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 1088))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 1094))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 1100))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 1110))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 860))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 862))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 864))) (= expdos (expr (ELEMENT_OPTIONS (= tokenIndex 868) (= p 21)))) { $e = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.e, $expdos.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (SUB_IG (ELEMENT_OPTIONS (= tokenIndex 881))) (SUM_IG (ELEMENT_OPTIONS (= tokenIndex 883))))) (expr (ELEMENT_OPTIONS (= tokenIndex 886) (= p 20))) { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 899))) (DIV (ELEMENT_OPTIONS (= tokenIndex 901))) (MOD (ELEMENT_OPTIONS (= tokenIndex 903))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 908) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 921))) (SUB (ELEMENT_OPTIONS (= tokenIndex 923))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 928) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 941))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 943))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 948) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 961))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 963))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 968) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 981))) (DIF (ELEMENT_OPTIONS (= tokenIndex 983))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 988) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 1000)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1004) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 1016)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1020) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-10-23 12:48:44:140 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1135> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1127> expr<tokenIndex=1129> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-10-23 12:48:44:148 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1135))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1127))) (expr (ELEMENT_OPTIONS (= tokenIndex 1129))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-10-23 12:48:44:149 left-recursion LogManager.java:25 listAccessArray returns [[]interface{} l]
    :   ( {} CORIZQ<tokenIndex=1162> expr<tokenIndex=1164> CORDER<tokenIndex=1166> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=1152> expr<tokenIndex=1154> CORDER<tokenIndex=1156> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-10-23 12:48:44:157 grammar LogManager.java:25 added: (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1162))) (expr (ELEMENT_OPTIONS (= tokenIndex 1164))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1166))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1152))) (expr (ELEMENT_OPTIONS (= tokenIndex 1154))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1156))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-10-23 12:48:44:159 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=1229> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> CORIZQ<tokenIndex=1185> expr<tokenIndex=1187> CORDER<tokenIndex=1189> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> PUNTO<tokenIndex=1201> ID<tokenIndex=1203> { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> types<tokenIndex=1215> IG<tokenIndex=1217> CORIZQ<tokenIndex=1219> expr<tokenIndex=1221> CORDER<tokenIndex=1223> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-10-23 12:48:44:165 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1229))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1185))) (expr (ELEMENT_OPTIONS (= tokenIndex 1187))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1189))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1201))) (ID (ELEMENT_OPTIONS (= tokenIndex 1203))) { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (types (ELEMENT_OPTIONS (= tokenIndex 1215))) (IG (ELEMENT_OPTIONS (= tokenIndex 1217))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1219))) (expr (ELEMENT_OPTIONS (= tokenIndex 1221))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1223))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-10-23 12:48:44:167 left-recursion LogManager.java:25 exprComa returns [interfaces.Expression t]
    :   ( {} expr<tokenIndex=1258> { $t = $expr.e } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> op=COMA<tokenIndex=1248> right=expr<tokenIndex=1252> { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }
        )*
    ;
2023-10-23 12:48:44:172 grammar LogManager.java:25 added: (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1258))) { $t = $expr.e })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (= op (COMA (ELEMENT_OPTIONS (= tokenIndex 1248)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1252)))) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }))))))
2023-10-23 12:48:44:241 grammar LogManager.java:25 import INT=1
2023-10-23 12:48:44:243 grammar LogManager.java:25 import FLOAT=2
2023-10-23 12:48:44:243 grammar LogManager.java:25 import BOOL=3
2023-10-23 12:48:44:243 grammar LogManager.java:25 import STR=4
2023-10-23 12:48:44:243 grammar LogManager.java:25 import CHAR=5
2023-10-23 12:48:44:243 grammar LogManager.java:25 import VAR=6
2023-10-23 12:48:44:243 grammar LogManager.java:25 import LET=7
2023-10-23 12:48:44:243 grammar LogManager.java:25 import VOID=8
2023-10-23 12:48:44:243 grammar LogManager.java:25 import TRU=9
2023-10-23 12:48:44:243 grammar LogManager.java:25 import FAL=10
2023-10-23 12:48:44:243 grammar LogManager.java:25 import PRINT=11
2023-10-23 12:48:44:246 grammar LogManager.java:25 import IF=12
2023-10-23 12:48:44:246 grammar LogManager.java:25 import ELSE=13
2023-10-23 12:48:44:246 grammar LogManager.java:25 import WHILE=14
2023-10-23 12:48:44:246 grammar LogManager.java:25 import FOR=15
2023-10-23 12:48:44:246 grammar LogManager.java:25 import IN=16
2023-10-23 12:48:44:246 grammar LogManager.java:25 import SWITCH=17
2023-10-23 12:48:44:246 grammar LogManager.java:25 import CASE=18
2023-10-23 12:48:44:246 grammar LogManager.java:25 import DEFAULT=19
2023-10-23 12:48:44:246 grammar LogManager.java:25 import BREAK=20
2023-10-23 12:48:44:246 grammar LogManager.java:25 import RETURN=21
2023-10-23 12:48:44:247 grammar LogManager.java:25 import CONTINUE=22
2023-10-23 12:48:44:247 grammar LogManager.java:25 import GUARD=23
2023-10-23 12:48:44:247 grammar LogManager.java:25 import FUNC=24
2023-10-23 12:48:44:247 grammar LogManager.java:25 import NIL=25
2023-10-23 12:48:44:248 grammar LogManager.java:25 import STRUCT=26
2023-10-23 12:48:44:248 grammar LogManager.java:25 import MUTATING=27
2023-10-23 12:48:44:248 grammar LogManager.java:25 import SELF=28
2023-10-23 12:48:44:248 grammar LogManager.java:25 import INOUT=29
2023-10-23 12:48:44:248 grammar LogManager.java:25 import APPEND=30
2023-10-23 12:48:44:248 grammar LogManager.java:25 import REMOVELAST=31
2023-10-23 12:48:44:248 grammar LogManager.java:25 import REMOVE=32
2023-10-23 12:48:44:248 grammar LogManager.java:25 import AT=33
2023-10-23 12:48:44:248 grammar LogManager.java:25 import ISEMPTY=34
2023-10-23 12:48:44:249 grammar LogManager.java:25 import COUNT=35
2023-10-23 12:48:44:249 grammar LogManager.java:25 import NUMBER=36
2023-10-23 12:48:44:249 grammar LogManager.java:25 import STRING=37
2023-10-23 12:48:44:249 grammar LogManager.java:25 import ID=38
2023-10-23 12:48:44:249 grammar LogManager.java:25 import DIF=39
2023-10-23 12:48:44:249 grammar LogManager.java:25 import IG_IG=40
2023-10-23 12:48:44:249 grammar LogManager.java:25 import NOT=41
2023-10-23 12:48:44:249 grammar LogManager.java:25 import OR=42
2023-10-23 12:48:44:249 grammar LogManager.java:25 import AND=43
2023-10-23 12:48:44:249 grammar LogManager.java:25 import IG=44
2023-10-23 12:48:44:249 grammar LogManager.java:25 import MAY_IG=45
2023-10-23 12:48:44:249 grammar LogManager.java:25 import MEN_IG=46
2023-10-23 12:48:44:250 grammar LogManager.java:25 import SUM_IG=47
2023-10-23 12:48:44:250 grammar LogManager.java:25 import SUB_IG=48
2023-10-23 12:48:44:250 grammar LogManager.java:25 import MAYOR=49
2023-10-23 12:48:44:250 grammar LogManager.java:25 import MENOR=50
2023-10-23 12:48:44:250 grammar LogManager.java:25 import MUL=51
2023-10-23 12:48:44:250 grammar LogManager.java:25 import DIV=52
2023-10-23 12:48:44:250 grammar LogManager.java:25 import ADD=53
2023-10-23 12:48:44:250 grammar LogManager.java:25 import SUB=54
2023-10-23 12:48:44:250 grammar LogManager.java:25 import MOD=55
2023-10-23 12:48:44:250 grammar LogManager.java:25 import PARIZQ=56
2023-10-23 12:48:44:250 grammar LogManager.java:25 import PARDER=57
2023-10-23 12:48:44:250 grammar LogManager.java:25 import LLAVEIZQ=58
2023-10-23 12:48:44:251 grammar LogManager.java:25 import LLAVEDER=59
2023-10-23 12:48:44:251 grammar LogManager.java:25 import D_PTS=60
2023-10-23 12:48:44:251 grammar LogManager.java:25 import CORIZQ=61
2023-10-23 12:48:44:251 grammar LogManager.java:25 import CORDER=62
2023-10-23 12:48:44:251 grammar LogManager.java:25 import COMA=63
2023-10-23 12:48:44:251 grammar LogManager.java:25 import PUNTO=64
2023-10-23 12:48:44:251 grammar LogManager.java:25 import COMILLA=65
2023-10-23 12:48:44:251 grammar LogManager.java:25 import FLECHA=66
2023-10-23 12:48:44:252 grammar LogManager.java:25 import GUIONBAJO=67
2023-10-23 12:48:44:253 grammar LogManager.java:25 import AMP=68
2023-10-23 12:48:44:253 grammar LogManager.java:25 import WHITESPACE=69
2023-10-23 12:48:44:253 grammar LogManager.java:25 import COMMENT=70
2023-10-23 12:48:44:253 grammar LogManager.java:25 import LINE_COMMENT=71
2023-10-23 12:48:44:253 grammar LogManager.java:25 import 'Int'=1
2023-10-23 12:48:44:253 grammar LogManager.java:25 import 'Float'=2
2023-10-23 12:48:44:253 grammar LogManager.java:25 import 'Bool'=3
2023-10-23 12:48:44:254 grammar LogManager.java:25 import 'String'=4
2023-10-23 12:48:44:254 grammar LogManager.java:25 import 'Character'=5
2023-10-23 12:48:44:254 grammar LogManager.java:25 import 'var'=6
2023-10-23 12:48:44:254 grammar LogManager.java:25 import 'let'=7
2023-10-23 12:48:44:254 grammar LogManager.java:25 import 'void'=8
2023-10-23 12:48:44:254 grammar LogManager.java:25 import 'true'=9
2023-10-23 12:48:44:254 grammar LogManager.java:25 import 'false'=10
2023-10-23 12:48:44:255 grammar LogManager.java:25 import 'print'=11
2023-10-23 12:48:44:255 grammar LogManager.java:25 import 'if'=12
2023-10-23 12:48:44:255 grammar LogManager.java:25 import 'else'=13
2023-10-23 12:48:44:255 grammar LogManager.java:25 import 'while'=14
2023-10-23 12:48:44:255 grammar LogManager.java:25 import 'for'=15
2023-10-23 12:48:44:255 grammar LogManager.java:25 import 'in'=16
2023-10-23 12:48:44:256 grammar LogManager.java:25 import 'switch'=17
2023-10-23 12:48:44:256 grammar LogManager.java:25 import 'case'=18
2023-10-23 12:48:44:256 grammar LogManager.java:25 import 'default'=19
2023-10-23 12:48:44:256 grammar LogManager.java:25 import 'break'=20
2023-10-23 12:48:44:256 grammar LogManager.java:25 import 'return'=21
2023-10-23 12:48:44:256 grammar LogManager.java:25 import 'continue'=22
2023-10-23 12:48:44:256 grammar LogManager.java:25 import 'guard'=23
2023-10-23 12:48:44:256 grammar LogManager.java:25 import 'func'=24
2023-10-23 12:48:44:256 grammar LogManager.java:25 import 'nil'=25
2023-10-23 12:48:44:256 grammar LogManager.java:25 import 'struct'=26
2023-10-23 12:48:44:256 grammar LogManager.java:25 import 'mutating'=27
2023-10-23 12:48:44:256 grammar LogManager.java:25 import 'self'=28
2023-10-23 12:48:44:256 grammar LogManager.java:25 import 'inout'=29
2023-10-23 12:48:44:257 grammar LogManager.java:25 import 'append'=30
2023-10-23 12:48:44:257 grammar LogManager.java:25 import 'removeLast'=31
2023-10-23 12:48:44:257 grammar LogManager.java:25 import 'remove'=32
2023-10-23 12:48:44:257 grammar LogManager.java:25 import 'at'=33
2023-10-23 12:48:44:257 grammar LogManager.java:25 import 'isEmpty'=34
2023-10-23 12:48:44:257 grammar LogManager.java:25 import 'count'=35
2023-10-23 12:48:44:257 grammar LogManager.java:25 import '!='=39
2023-10-23 12:48:44:257 grammar LogManager.java:25 import '=='=40
2023-10-23 12:48:44:257 grammar LogManager.java:25 import '!'=41
2023-10-23 12:48:44:257 grammar LogManager.java:25 import '||'=42
2023-10-23 12:48:44:257 grammar LogManager.java:25 import '&&'=43
2023-10-23 12:48:44:257 grammar LogManager.java:25 import '='=44
2023-10-23 12:48:44:257 grammar LogManager.java:25 import '>='=45
2023-10-23 12:48:44:257 grammar LogManager.java:25 import '<='=46
2023-10-23 12:48:44:257 grammar LogManager.java:25 import '+='=47
2023-10-23 12:48:44:258 grammar LogManager.java:25 import '-='=48
2023-10-23 12:48:44:258 grammar LogManager.java:25 import '>'=49
2023-10-23 12:48:44:258 grammar LogManager.java:25 import '<'=50
2023-10-23 12:48:44:258 grammar LogManager.java:25 import '*'=51
2023-10-23 12:48:44:258 grammar LogManager.java:25 import '/'=52
2023-10-23 12:48:44:258 grammar LogManager.java:25 import '+'=53
2023-10-23 12:48:44:258 grammar LogManager.java:25 import '-'=54
2023-10-23 12:48:44:258 grammar LogManager.java:25 import '%'=55
2023-10-23 12:48:44:258 grammar LogManager.java:25 import '('=56
2023-10-23 12:48:44:258 grammar LogManager.java:25 import ')'=57
2023-10-23 12:48:44:258 grammar LogManager.java:25 import '{'=58
2023-10-23 12:48:44:258 grammar LogManager.java:25 import '}'=59
2023-10-23 12:48:44:258 grammar LogManager.java:25 import ':'=60
2023-10-23 12:48:44:259 grammar LogManager.java:25 import '['=61
2023-10-23 12:48:44:259 grammar LogManager.java:25 import ']'=62
2023-10-23 12:48:44:259 grammar LogManager.java:25 import ','=63
2023-10-23 12:48:44:259 grammar LogManager.java:25 import '.'=64
2023-10-23 12:48:44:259 grammar LogManager.java:25 import '"'=65
2023-10-23 12:48:44:259 grammar LogManager.java:25 import '->'=66
2023-10-23 12:48:44:259 grammar LogManager.java:25 import '_'=67
2023-10-23 12:48:44:259 grammar LogManager.java:25 import '&'=68
2023-10-23 12:48:44:262 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, FLECHA=66, GUIONBAJO=67, AMP=68, WHITESPACE=69, COMMENT=70, LINE_COMMENT=71, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65, '->'=66, '_'=67, '&'=68}
2023-10-23 12:48:44:267 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, FLECHA=66, GUIONBAJO=67, AMP=68, WHITESPACE=69, COMMENT=70, LINE_COMMENT=71}
2023-10-23 12:48:44:269 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65, '->'=66, '_'=67, '&'=68}
2023-10-23 12:48:44:461 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-10-23 12:48:44:465 LL1 LogManager.java:25 look=[{6..7, 11..12, 14, 20, 22, 24, 38}, {<EOF>, 59}]
2023-10-23 12:48:44:466 LL1 LogManager.java:25 LL(1)? true
2023-10-23 12:48:44:466 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-10-23 12:48:44:467 LL1 LogManager.java:25 look=[11, 12, {6..7}, 14, 38, 20, 22, 24, 38]
2023-10-23 12:48:44:467 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:467 LL1 LogManager.java:25 
DECISION 2 in rule printstmt
2023-10-23 12:48:44:467 LL1 LogManager.java:25 look=[11, 11]
2023-10-23 12:48:44:467 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:467 LL1 LogManager.java:25 
DECISION 3 in rule ifstmt
2023-10-23 12:48:44:467 LL1 LogManager.java:25 look=[12, 12, 12]
2023-10-23 12:48:44:467 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:467 LL1 LogManager.java:25 
DECISION 4 in rule declarationstmt
2023-10-23 12:48:44:467 LL1 LogManager.java:25 look=[6, 6, 6, 7, 7, 7]
2023-10-23 12:48:44:467 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:467 LL1 LogManager.java:25 
DECISION 5 in rule assignstmt
2023-10-23 12:48:44:468 LL1 LogManager.java:25 look=[38, 38]
2023-10-23 12:48:44:468 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:468 LL1 LogManager.java:25 
DECISION 6 in rule fnstmt
2023-10-23 12:48:44:468 LL1 LogManager.java:25 look=[24, 24]
2023-10-23 12:48:44:468 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:468 LL1 LogManager.java:25 
DECISION 7 in rule listParamsFunc
2023-10-23 12:48:44:469 LL1 LogManager.java:25 look=[{38, 67}, null]
2023-10-23 12:48:44:469 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:469 LL1 LogManager.java:25 
DECISION 8 in rule listParamsFunc
2023-10-23 12:48:44:469 LL1 LogManager.java:25 look=[null, 57]
2023-10-23 12:48:44:469 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:469 LL1 LogManager.java:25 
DECISION 9 in rule parametro
2023-10-23 12:48:44:469 LL1 LogManager.java:25 look=[38, {38, 67}]
2023-10-23 12:48:44:469 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:469 LL1 LogManager.java:25 
DECISION 10 in rule listParamsCall
2023-10-23 12:48:44:470 LL1 LogManager.java:25 look=[{9..10, 25, 36..38, 41, 54, 56, 61}, null]
2023-10-23 12:48:44:470 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:470 LL1 LogManager.java:25 
DECISION 11 in rule listParamsCall
2023-10-23 12:48:44:470 LL1 LogManager.java:25 look=[null, 57]
2023-10-23 12:48:44:470 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:470 LL1 LogManager.java:25 
DECISION 12 in rule types
2023-10-23 12:48:44:470 LL1 LogManager.java:25 look=[1, 2, 4, 3, 61, 65, 25, 26, 38]
2023-10-23 12:48:44:470 LL1 LogManager.java:25 LL(1)? true
2023-10-23 12:48:44:470 LL1 LogManager.java:25 
DECISION 13 in rule expr
2023-10-23 12:48:44:471 LL1 LogManager.java:25 look=[54, 41, 56, 38, 61, 38, 61, 36, 37, 9, 10, 25]
2023-10-23 12:48:44:471 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:471 LL1 LogManager.java:25 
DECISION 14 in rule expr
2023-10-23 12:48:44:471 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null]
2023-10-23 12:48:44:471 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:471 LL1 LogManager.java:25 
DECISION 15 in rule expr
2023-10-23 12:48:44:474 LL1 LogManager.java:25 look=[null, null]
2023-10-23 12:48:44:474 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:474 LL1 LogManager.java:25 
DECISION 16 in rule listParams
2023-10-23 12:48:44:474 LL1 LogManager.java:25 look=[null, 62]
2023-10-23 12:48:44:474 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:474 LL1 LogManager.java:25 
DECISION 17 in rule listAccessArray
2023-10-23 12:48:44:474 LL1 LogManager.java:25 look=[null, <EOF>]
2023-10-23 12:48:44:474 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:474 LL1 LogManager.java:25 
DECISION 18 in rule listArray
2023-10-23 12:48:44:474 LL1 LogManager.java:25 look=[null, null, null]
2023-10-23 12:48:44:474 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:474 LL1 LogManager.java:25 
DECISION 19 in rule listArray
2023-10-23 12:48:44:476 LL1 LogManager.java:25 look=[null, null]
2023-10-23 12:48:44:476 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:476 LL1 LogManager.java:25 
DECISION 20 in rule exprComa
2023-10-23 12:48:44:476 LL1 LogManager.java:25 look=[null, 57]
2023-10-23 12:48:44:476 LL1 LogManager.java:25 LL(1)? false
2023-10-23 12:48:44:493 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-23 12:48:44:533 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-10-23 12:48:44:533 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-10-23 12:48:44:537 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-10-23 12:48:44:542 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-10-23 12:48:44:543 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-10-23 12:48:44:551 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-10-23 12:48:44:551 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-10-23 12:48:44:551 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-10-23 12:48:44:554 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-10-23 12:48:44:554 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:14]
2023-10-23 12:48:44:555 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,40:22].[@-1,20:23='prnt',<0>,40:32]
2023-10-23 12:48:44:555 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-10-23 12:48:44:556 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:11]
2023-10-23 12:48:44:556 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,41:19].[@-1,17:22='ifinst',<0>,41:26]
2023-10-23 12:48:44:557 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-10-23 12:48:44:557 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:20]
2023-10-23 12:48:44:557 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,42:28].[@-1,26:28='dec',<0>,42:44]
2023-10-23 12:48:44:558 action-translator LogManager.java:25 translate  $inst = $whilestmt.whl 
2023-10-23 12:48:44:558 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-10-23 12:48:44:558 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:22='whl',<0>,43:32]
2023-10-23 12:48:44:559 action-translator LogManager.java:25 translate  $inst = $assignstmt.asg 
2023-10-23 12:48:44:559 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:15]
2023-10-23 12:48:44:559 action-translator LogManager.java:25 qattr [@-1,10:19='assignstmt',<0>,44:23].[@-1,21:23='asg',<0>,44:34]
2023-10-23 12:48:44:559 action-translator LogManager.java:25 translate  $inst = $breakstmt.brk 
2023-10-23 12:48:44:560 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:14]
2023-10-23 12:48:44:560 action-translator LogManager.java:25 qattr [@-1,10:18='breakstmt',<0>,47:22].[@-1,20:22='brk',<0>,47:32]
2023-10-23 12:48:44:560 action-translator LogManager.java:25 translate  $inst = $continuestmt.cnt 
2023-10-23 12:48:44:560 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:17]
2023-10-23 12:48:44:560 action-translator LogManager.java:25 qattr [@-1,10:21='continuestmt',<0>,48:25].[@-1,23:25='cnt',<0>,48:38]
2023-10-23 12:48:44:561 action-translator LogManager.java:25 translate  $inst = $fnstmt.fn 
2023-10-23 12:48:44:561 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:11]
2023-10-23 12:48:44:561 action-translator LogManager.java:25 qattr [@-1,10:15='fnstmt',<0>,52:19].[@-1,17:18='fn',<0>,52:26]
2023-10-23 12:48:44:562 action-translator LogManager.java:25 translate  $inst = $callFunction.cf 
2023-10-23 12:48:44:562 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,53:17]
2023-10-23 12:48:44:562 action-translator LogManager.java:25 qattr [@-1,10:21='callFunction',<0>,53:25].[@-1,23:24='cf',<0>,53:38]
2023-10-23 12:48:44:567 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-10-23 12:48:44:567 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,57:29]
2023-10-23 12:48:44:567 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,57:59].[@-1,38:41='line',<0>,57:65]
2023-10-23 12:48:44:571 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,57:71].[@-1,50:52='pos',<0>,57:77]
2023-10-23 12:48:44:573 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,57:82].[@-1,60:60='e',<0>,57:87]
2023-10-23 12:48:44:575 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)
2023-10-23 12:48:44:575 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,58:33]
2023-10-23 12:48:44:576 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,58:63].[@-1,38:41='line',<0>,58:69]
2023-10-23 12:48:44:576 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,58:75].[@-1,50:52='pos',<0>,58:81]
2023-10-23 12:48:44:577 action-translator LogManager.java:25 qattr [@-1,55:62='exprComa',<0>,58:86].[@-1,64:64='t',<0>,58:95]
2023-10-23 12:48:44:584 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-10-23 12:48:44:584 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,62:40]
2023-10-23 12:48:44:585 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,62:69].[@-1,34:37='line',<0>,62:72]
2023-10-23 12:48:44:586 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,62:79].[@-1,44:46='pos',<0>,62:82]
2023-10-23 12:48:44:586 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,62:88].[@-1,55:55='e',<0>,62:93]
2023-10-23 12:48:44:587 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,62:97].[@-1,65:67='blk',<0>,62:103]
2023-10-23 12:48:44:589 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) 
2023-10-23 12:48:44:590 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,63:75]
2023-10-23 12:48:44:590 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,63:104].[@-1,34:37='line',<0>,63:107]
2023-10-23 12:48:44:591 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,63:114].[@-1,44:46='pos',<0>,63:117]
2023-10-23 12:48:44:591 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,63:123].[@-1,55:55='e',<0>,63:128]
2023-10-23 12:48:44:591 action-translator LogManager.java:25 qattr [@-1,59:60='e1',<0>,63:132].[@-1,62:64='blk',<0>,63:135]
2023-10-23 12:48:44:591 action-translator LogManager.java:25 qattr [@-1,68:69='e2',<0>,63:141].[@-1,71:73='blk',<0>,63:144]
2023-10-23 12:48:44:593 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) 
2023-10-23 12:48:44:594 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,64:52]
2023-10-23 12:48:44:594 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,64:81].[@-1,34:37='line',<0>,64:84]
2023-10-23 12:48:44:595 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,64:91].[@-1,44:46='pos',<0>,64:94]
2023-10-23 12:48:44:595 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,64:100].[@-1,55:55='e',<0>,64:105]
2023-10-23 12:48:44:596 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,64:109].[@-1,65:67='blk',<0>,64:115]
2023-10-23 12:48:44:596 action-translator LogManager.java:25 qattr [@-1,85:90='ifstmt',<0>,64:135].[@-1,92:97='ifinst',<0>,64:142]
2023-10-23 12:48:44:599 action-translator LogManager.java:25 translate  $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-10-23 12:48:44:600 action-translator LogManager.java:25 attr [@-1,2:4='whl',<0>,68:43]
2023-10-23 12:48:44:600 action-translator LogManager.java:25 qattr [@-1,31:35='WHILE',<0>,68:72].[@-1,37:40='line',<0>,68:78]
2023-10-23 12:48:44:601 action-translator LogManager.java:25 qattr [@-1,44:48='WHILE',<0>,68:85].[@-1,50:52='pos',<0>,68:91]
2023-10-23 12:48:44:601 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,68:97].[@-1,61:61='e',<0>,68:102]
2023-10-23 12:48:44:601 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,68:106].[@-1,71:73='blk',<0>,68:112]
2023-10-23 12:48:44:610 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) 
2023-10-23 12:48:44:610 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,72:32]
2023-10-23 12:48:44:610 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,72:67].[@-1,41:44='line',<0>,72:71]
2023-10-23 12:48:44:611 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,72:78].[@-1,52:54='pos',<0>,72:82]
2023-10-23 12:48:44:613 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,72:88].[@-1,61:64='text',<0>,72:91]
2023-10-23 12:48:44:615 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,72:98].[@-1,74:75='ty',<0>,72:104]
2023-10-23 12:48:44:616 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,72:109].[@-1,84:84='e',<0>,72:114]
2023-10-23 12:48:44:617 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) 
2023-10-23 12:48:44:617 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,73:19]
2023-10-23 12:48:44:617 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,73:54].[@-1,41:44='line',<0>,73:58]
2023-10-23 12:48:44:618 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,73:65].[@-1,52:54='pos',<0>,73:69]
2023-10-23 12:48:44:618 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,73:75].[@-1,61:64='text',<0>,73:78]
2023-10-23 12:48:44:619 action-translator LogManager.java:25 qattr [@-1,89:92='expr',<0>,73:106].[@-1,94:94='e',<0>,73:111]
2023-10-23 12:48:44:621 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) 
2023-10-23 12:48:44:623 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,74:24]
2023-10-23 12:48:44:623 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,74:59].[@-1,41:44='line',<0>,74:63]
2023-10-23 12:48:44:630 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,74:70].[@-1,52:54='pos',<0>,74:74]
2023-10-23 12:48:44:630 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,74:80].[@-1,61:64='text',<0>,74:83]
2023-10-23 12:48:44:634 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,74:90].[@-1,74:75='ty',<0>,74:96]
2023-10-23 12:48:44:638 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) 
2023-10-23 12:48:44:639 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,75:32]
2023-10-23 12:48:44:639 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,75:67].[@-1,41:44='line',<0>,75:71]
2023-10-23 12:48:44:640 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,75:78].[@-1,52:54='pos',<0>,75:82]
2023-10-23 12:48:44:641 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,75:88].[@-1,61:64='text',<0>,75:91]
2023-10-23 12:48:44:641 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,75:98].[@-1,74:75='ty',<0>,75:104]
2023-10-23 12:48:44:642 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,75:109].[@-1,84:84='e',<0>,75:114]
2023-10-23 12:48:44:645 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) 
2023-10-23 12:48:44:646 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,76:24]
2023-10-23 12:48:44:646 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,76:59].[@-1,41:44='line',<0>,76:63]
2023-10-23 12:48:44:647 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,76:70].[@-1,52:54='pos',<0>,76:74]
2023-10-23 12:48:44:648 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,76:80].[@-1,61:64='text',<0>,76:83]
2023-10-23 12:48:44:648 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,76:90].[@-1,74:75='ty',<0>,76:96]
2023-10-23 12:48:44:650 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) 
2023-10-23 12:48:44:650 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,77:19]
2023-10-23 12:48:44:650 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,77:54].[@-1,41:44='line',<0>,77:58]
2023-10-23 12:48:44:650 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,77:65].[@-1,52:54='pos',<0>,77:69]
2023-10-23 12:48:44:651 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,77:75].[@-1,61:64='text',<0>,77:78]
2023-10-23 12:48:44:653 action-translator LogManager.java:25 qattr [@-1,89:92='expr',<0>,77:106].[@-1,94:94='e',<0>,77:111]
2023-10-23 12:48:44:656 action-translator LogManager.java:25 translate  $asg = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-10-23 12:48:44:657 action-translator LogManager.java:25 attr [@-1,2:4='asg',<0>,81:18]
2023-10-23 12:48:44:657 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,81:52].[@-1,39:42='line',<0>,81:55]
2023-10-23 12:48:44:658 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,81:62].[@-1,49:51='pos',<0>,81:65]
2023-10-23 12:48:44:659 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,81:71].[@-1,58:61='text',<0>,81:74]
2023-10-23 12:48:44:666 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,81:81].[@-1,70:70='e',<0>,81:86]
2023-10-23 12:48:44:673 action-translator LogManager.java:25 translate  $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); 
2023-10-23 12:48:44:677 action-translator LogManager.java:25 setAttr [@-1,2:4='asg',<0>,83:33] [@-1,7:89=' instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)',<0>,83:38]
2023-10-23 12:48:44:677 action-translator LogManager.java:25 translate  instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)
2023-10-23 12:48:44:677 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,83:68].[@-1,40:43='line',<0>,83:71]
2023-10-23 12:48:44:677 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,83:78].[@-1,50:52='pos',<0>,83:81]
2023-10-23 12:48:44:678 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,83:87].[@-1,59:62='text',<0>,83:90]
2023-10-23 12:48:44:678 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,83:97].[@-1,69:72='text',<0>,83:100]
2023-10-23 12:48:44:678 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,83:107].[@-1,81:81='e',<0>,83:112]
2023-10-23 12:48:44:683 action-translator LogManager.java:25 translate  $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk) 
2023-10-23 12:48:44:683 action-translator LogManager.java:25 attr [@-1,2:3='fr',<0>,88:43]
2023-10-23 12:48:44:683 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,88:71].[@-1,34:37='line',<0>,88:75]
2023-10-23 12:48:44:684 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,88:82].[@-1,45:47='pos',<0>,88:86]
2023-10-23 12:48:44:689 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,88:92].[@-1,54:57='text',<0>,88:95]
2023-10-23 12:48:44:690 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,88:102].[@-1,66:66='e',<0>,88:107]
2023-10-23 12:48:44:690 action-translator LogManager.java:25 qattr [@-1,70:74='block',<0>,88:111].[@-1,76:78='blk',<0>,88:117]
2023-10-23 12:48:44:697 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) 
2023-10-23 12:48:44:702 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,96:10]
2023-10-23 12:48:44:705 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,96:39].[@-1,37:40='line',<0>,96:45]
2023-10-23 12:48:44:706 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,96:52].[@-1,50:52='pos',<0>,96:58]
2023-10-23 12:48:44:709 action-translator LogManager.java:25 translate  $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2023-10-23 12:48:44:710 action-translator LogManager.java:25 attr [@-1,2:4='cnt',<0>,100:13]
2023-10-23 12:48:44:710 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,100:45].[@-1,43:46='line',<0>,100:54]
2023-10-23 12:48:44:710 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,100:61].[@-1,59:61='pos',<0>,100:70]
2023-10-23 12:48:44:723 action-translator LogManager.java:25 translate  $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) 
2023-10-23 12:48:44:726 action-translator LogManager.java:25 attr [@-1,2:3='fn',<0>,183:78]
2023-10-23 12:48:44:726 action-translator LogManager.java:25 qattr [@-1,33:36='FUNC',<0>,183:109].[@-1,38:41='line',<0>,183:114]
2023-10-23 12:48:44:727 action-translator LogManager.java:25 qattr [@-1,45:48='FUNC',<0>,183:121].[@-1,50:52='pos',<0>,183:126]
2023-10-23 12:48:44:727 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,183:132].[@-1,59:62='text',<0>,183:135]
2023-10-23 12:48:44:729 action-translator LogManager.java:25 qattr [@-1,66:79='listParamsFunc',<0>,183:142].[@-1,81:81='l',<0>,183:157]
2023-10-23 12:48:44:729 action-translator LogManager.java:25 qattr [@-1,85:89='types',<0>,183:161].[@-1,91:92='ty',<0>,183:167]
2023-10-23 12:48:44:730 action-translator LogManager.java:25 qattr [@-1,96:100='block',<0>,183:172].[@-1,102:104='blk',<0>,183:178]
2023-10-23 12:48:44:732 action-translator LogManager.java:25 translate  $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) 
2023-10-23 12:48:44:732 action-translator LogManager.java:25 attr [@-1,2:3='fn',<0>,184:65]
2023-10-23 12:48:44:732 action-translator LogManager.java:25 qattr [@-1,33:36='FUNC',<0>,184:96].[@-1,38:41='line',<0>,184:101]
2023-10-23 12:48:44:733 action-translator LogManager.java:25 qattr [@-1,45:48='FUNC',<0>,184:108].[@-1,50:52='pos',<0>,184:113]
2023-10-23 12:48:44:733 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,184:119].[@-1,59:62='text',<0>,184:122]
2023-10-23 12:48:44:734 action-translator LogManager.java:25 qattr [@-1,66:79='listParamsFunc',<0>,184:129].[@-1,81:81='l',<0>,184:144]
2023-10-23 12:48:44:735 action-translator LogManager.java:25 qattr [@-1,102:106='block',<0>,184:165].[@-1,108:110='blk',<0>,184:171]
2023-10-23 12:48:44:741 action-translator LogManager.java:25 translate 
2023-10-23 12:48:44:742 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        
2023-10-23 12:48:44:742 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-23 12:48:44:743 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-23 12:48:44:743 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-23 12:48:44:744 action-translator LogManager.java:25 qattr [@-1,65:73='parametro',<0>,4:29].[@-1,75:75='p',<0>,4:39]
2023-10-23 12:48:44:745 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-23 12:48:44:746 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-10-23 12:48:44:751 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-23 12:48:44:754 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $parametro.p)
                                          $l = arr
                                      
2023-10-23 12:48:44:756 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,13:56].[@-1,128:128='l',<0>,13:61]
2023-10-23 12:48:44:757 action-translator LogManager.java:25 qattr [@-1,132:140='parametro',<0>,13:65].[@-1,142:142='p',<0>,13:75]
2023-10-23 12:48:44:757 action-translator LogManager.java:25 attr [@-1,189:189='l',<0>,14:43]
2023-10-23 12:48:44:762 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-23 12:48:44:766 action-translator LogManager.java:25 translate  $p = instructions.NewParamsDeclaration($ID.line,$ID.pos,$ID.text, $types.ty)
2023-10-23 12:48:44:766 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,203:20]
2023-10-23 12:48:44:767 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,203:59].[@-1,44:47='line',<0>,203:62]
2023-10-23 12:48:44:767 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,203:68].[@-1,53:55='pos',<0>,203:71]
2023-10-23 12:48:44:768 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,203:76].[@-1,61:64='text',<0>,203:79]
2023-10-23 12:48:44:769 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,203:86].[@-1,74:75='ty',<0>,203:92]
2023-10-23 12:48:44:770 action-translator LogManager.java:25 translate  $p = instructions.NewParamsDeclaration($ID.line,$ID.pos, $ID.text, $types.ty)
2023-10-23 12:48:44:771 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,204:39]
2023-10-23 12:48:44:771 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,204:78].[@-1,44:47='line',<0>,204:81]
2023-10-23 12:48:44:771 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,204:87].[@-1,53:55='pos',<0>,204:90]
2023-10-23 12:48:44:774 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,204:96].[@-1,62:65='text',<0>,204:99]
2023-10-23 12:48:44:774 action-translator LogManager.java:25 qattr [@-1,69:73='types',<0>,204:106].[@-1,75:76='ty',<0>,204:112]
2023-10-23 12:48:44:778 action-translator LogManager.java:25 translate  $cfe = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-10-23 12:48:44:781 action-translator LogManager.java:25 attr [@-1,2:4='cfe',<0>,208:36]
2023-10-23 12:48:44:782 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,208:66].[@-1,35:38='line',<0>,208:69]
2023-10-23 12:48:44:783 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,208:76].[@-1,45:47='pos',<0>,208:79]
2023-10-23 12:48:44:784 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,208:85].[@-1,54:57='text',<0>,208:88]
2023-10-23 12:48:44:784 action-translator LogManager.java:25 qattr [@-1,61:74='listParamsCall',<0>,208:95].[@-1,76:76='l',<0>,208:110]
2023-10-23 12:48:44:790 action-translator LogManager.java:25 translate  $cf = instructions.NewCallFunc($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-10-23 12:48:44:792 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,212:36]
2023-10-23 12:48:44:792 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,212:67].[@-1,36:39='line',<0>,212:70]
2023-10-23 12:48:44:793 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,212:77].[@-1,46:48='pos',<0>,212:80]
2023-10-23 12:48:44:797 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,212:86].[@-1,55:58='text',<0>,212:89]
2023-10-23 12:48:44:798 action-translator LogManager.java:25 qattr [@-1,62:75='listParamsCall',<0>,212:96].[@-1,77:77='l',<0>,212:111]
2023-10-23 12:48:44:807 action-translator LogManager.java:25 translate 
2023-10-23 12:48:44:809 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-23 12:48:44:809 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-23 12:48:44:811 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-23 12:48:44:812 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-23 12:48:44:814 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-23 12:48:44:814 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-23 12:48:44:816 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-10-23 12:48:44:816 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-23 12:48:44:817 action-translator LogManager.java:25 translate 
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          
2023-10-23 12:48:44:817 action-translator LogManager.java:25 qattr [@-1,131:134='list',<0>,13:60].[@-1,136:136='l',<0>,13:65]
2023-10-23 12:48:44:817 action-translator LogManager.java:25 qattr [@-1,140:143='expr',<0>,13:69].[@-1,145:145='e',<0>,13:74]
2023-10-23 12:48:44:817 action-translator LogManager.java:25 attr [@-1,196:196='l',<0>,14:47]
2023-10-23 12:48:44:818 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-23 12:48:44:821 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-10-23 12:48:44:821 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,232:8]
2023-10-23 12:48:44:821 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-10-23 12:48:44:823 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,233:10]
2023-10-23 12:48:44:823 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-10-23 12:48:44:824 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,234:8]
2023-10-23 12:48:44:824 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-10-23 12:48:44:824 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,235:9]
2023-10-23 12:48:44:827 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-10-23 12:48:44:827 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,236:24]
2023-10-23 12:48:44:828 action-translator LogManager.java:25 translate  $ty = environment.STR 
2023-10-23 12:48:44:828 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,237:24]
2023-10-23 12:48:44:828 action-translator LogManager.java:25 translate  $ty = environment.NIL 
2023-10-23 12:48:44:828 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,238:8]
2023-10-23 12:48:44:828 action-translator LogManager.java:25 translate  $ty = environment.STRUCT 
2023-10-23 12:48:44:828 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,239:11]
2023-10-23 12:48:44:829 action-translator LogManager.java:25 translate  $ty = environment.UNKNOWN 
2023-10-23 12:48:44:829 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,240:7]
2023-10-23 12:48:44:840 action-translator LogManager.java:25 translate 
2023-10-23 12:48:44:841 action-translator LogManager.java:25 translate $e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)
2023-10-23 12:48:44:841 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,2:65]
2023-10-23 12:48:44:841 action-translator LogManager.java:25 qattr [@-1,31:33='SUB',<0>,2:95].[@-1,35:38='line',<0>,2:99]
2023-10-23 12:48:44:842 action-translator LogManager.java:25 qattr [@-1,41:43='SUB',<0>,2:105].[@-1,45:47='pos',<0>,2:109]
2023-10-23 12:48:44:842 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,2:114].[@-1,55:55='e',<0>,2:119]
2023-10-23 12:48:44:843 action-translator LogManager.java:25 translate $e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)
2023-10-23 12:48:44:843 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,3:65]
2023-10-23 12:48:44:843 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:95].[@-1,35:38='line',<0>,3:99]
2023-10-23 12:48:44:843 action-translator LogManager.java:25 qattr [@-1,42:44='NOT',<0>,3:106].[@-1,46:48='pos',<0>,3:110]
2023-10-23 12:48:44:844 action-translator LogManager.java:25 qattr [@-1,52:56='right',<0>,3:116].[@-1,58:58='e',<0>,3:122]
2023-10-23 12:48:44:845 action-translator LogManager.java:25 qattr [@-1,62:64='NOT',<0>,3:126].[@-1,66:69='text',<0>,3:130]
2023-10-23 12:48:44:856 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-10-23 12:48:44:857 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:82]
2023-10-23 12:48:44:857 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:87].[@-1,12:12='e',<0>,4:92]
2023-10-23 12:48:44:860 action-translator LogManager.java:25 translate  $e = $callExp.cfe 
2023-10-23 12:48:44:861 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:37]
2023-10-23 12:48:44:861 action-translator LogManager.java:25 qattr [@-1,7:13='callExp',<0>,5:42].[@-1,15:17='cfe',<0>,5:50]
2023-10-23 12:48:44:861 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) 
2023-10-23 12:48:44:861 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:60]
2023-10-23 12:48:44:863 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,6:86].[@-1,35:38='line',<0>,6:93]
2023-10-23 12:48:44:863 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,6:100].[@-1,49:51='pos',<0>,6:107]
2023-10-23 12:48:44:866 action-translator LogManager.java:25 translate  $e = $list.p
2023-10-23 12:48:44:867 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:44]
2023-10-23 12:48:44:867 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,7:49].[@-1,12:12='p',<0>,7:54]
2023-10-23 12:48:44:869 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-10-23 12:48:44:870 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:88]
2023-10-23 12:48:44:870 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,8:114].[@-1,35:38='line',<0>,8:121]
2023-10-23 12:48:44:870 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,8:128].[@-1,49:51='pos',<0>,8:135]
2023-10-23 12:48:44:870 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,8:141].[@-1,66:66='l',<0>,8:152]
2023-10-23 12:48:44:871 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-10-23 12:48:44:871 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,11:30].[@-1,39:42='text',<0>,11:37]
2023-10-23 12:48:44:871 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,12:43].[@-1,102:105='text',<0>,12:50]
2023-10-23 12:48:44:872 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,16:13]
2023-10-23 12:48:44:872 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,16:43].[@-1,240:243='line',<0>,16:50]
2023-10-23 12:48:44:872 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,16:56].[@-1,253:255='pos',<0>,16:63]
2023-10-23 12:48:44:872 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,18:37].[@-1,341:344='text',<0>,18:44]
2023-10-23 12:48:44:873 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,22:13]
2023-10-23 12:48:44:873 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,22:43].[@-1,474:477='line',<0>,22:50]
2023-10-23 12:48:44:873 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,22:56].[@-1,487:489='pos',<0>,22:63]
2023-10-23 12:48:44:874 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-10-23 12:48:44:874 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,27:16].[@-1,25:28='text',<0>,27:23]
2023-10-23 12:48:44:875 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,28:9]
2023-10-23 12:48:44:875 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,28:39].[@-1,77:80='line',<0>,28:46]
2023-10-23 12:48:44:875 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,28:53].[@-1,91:93='pos',<0>,28:60]
2023-10-23 12:48:44:876 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-10-23 12:48:44:876 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:33]
2023-10-23 12:48:44:877 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,30:63].[@-1,36:39='line',<0>,30:67]
2023-10-23 12:48:44:877 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,30:74].[@-1,47:49='pos',<0>,30:78]
2023-10-23 12:48:44:878 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-10-23 12:48:44:879 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:33]
2023-10-23 12:48:44:879 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,31:63].[@-1,36:39='line',<0>,31:67]
2023-10-23 12:48:44:879 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,31:74].[@-1,47:49='pos',<0>,31:78]
2023-10-23 12:48:44:880 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) 
2023-10-23 12:48:44:880 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:33]
2023-10-23 12:48:44:880 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,32:63].[@-1,36:39='line',<0>,32:67]
2023-10-23 12:48:44:881 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,32:74].[@-1,47:49='pos',<0>,32:78]
2023-10-23 12:48:44:881 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-10-23 12:48:44:881 action-translator LogManager.java:25 translate  $e = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.e, $expdos.e) 
2023-10-23 12:48:44:881 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:161]
2023-10-23 12:48:44:883 action-translator LogManager.java:25 qattr [@-1,28:33='expuno',<0>,35:187].[@-1,35:39='start',<0>,35:194]
2023-10-23 12:48:44:884 action-translator LogManager.java:25 qattr [@-1,52:57='expuno',<0>,35:211].[@-1,59:63='start',<0>,35:218]
2023-10-23 12:48:44:884 action-translator LogManager.java:25 qattr [@-1,79:84='expuno',<0>,35:238].[@-1,86:86='e',<0>,35:245]
2023-10-23 12:48:44:884 action-translator LogManager.java:25 qattr [@-1,90:95='expdos',<0>,35:249].[@-1,97:97='e',<0>,35:256]
2023-10-23 12:48:44:885 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-10-23 12:48:44:886 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) 
2023-10-23 12:48:44:886 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:149]
2023-10-23 12:48:44:886 action-translator LogManager.java:25 qattr [@-1,32:33='op',<0>,36:179].[@-1,35:38='line',<0>,36:182]
2023-10-23 12:48:44:887 action-translator LogManager.java:25 qattr [@-1,42:43='op',<0>,36:189].[@-1,45:47='pos',<0>,36:192]
2023-10-23 12:48:44:887 action-translator LogManager.java:25 qattr [@-1,56:57='op',<0>,36:203].[@-1,59:62='text',<0>,36:206]
2023-10-23 12:48:44:887 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,36:213].[@-1,71:71='e',<0>,36:218]
2023-10-23 12:48:44:887 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-10-23 12:48:44:888 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-23 12:48:44:888 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:169]
2023-10-23 12:48:44:888 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:199].[@-1,37:41='start',<0>,37:204]
2023-10-23 12:48:44:888 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:222].[@-1,60:64='start',<0>,37:227]
2023-10-23 12:48:44:889 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:247].[@-1,85:85='e',<0>,37:252]
2023-10-23 12:48:44:889 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:256].[@-1,92:95='text',<0>,37:259]
2023-10-23 12:48:44:889 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:266].[@-1,105:105='e',<0>,37:272]
2023-10-23 12:48:44:890 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-10-23 12:48:44:890 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-23 12:48:44:890 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:149]
2023-10-23 12:48:44:890 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:179].[@-1,37:41='start',<0>,38:184]
2023-10-23 12:48:44:890 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:202].[@-1,60:64='start',<0>,38:207]
2023-10-23 12:48:44:891 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:227].[@-1,85:85='e',<0>,38:232]
2023-10-23 12:48:44:891 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:236].[@-1,92:95='text',<0>,38:239]
2023-10-23 12:48:44:891 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:246].[@-1,105:105='e',<0>,38:252]
2023-10-23 12:48:44:891 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-10-23 12:48:44:893 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-23 12:48:44:894 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:154]
2023-10-23 12:48:44:894 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:184].[@-1,37:41='start',<0>,39:189]
2023-10-23 12:48:44:894 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:207].[@-1,60:64='start',<0>,39:212]
2023-10-23 12:48:44:895 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:232].[@-1,85:85='e',<0>,39:237]
2023-10-23 12:48:44:895 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:241].[@-1,92:95='text',<0>,39:244]
2023-10-23 12:48:44:895 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:251].[@-1,105:105='e',<0>,39:257]
2023-10-23 12:48:44:897 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-23 12:48:44:897 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-23 12:48:44:898 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:154]
2023-10-23 12:48:44:899 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:184].[@-1,37:41='start',<0>,40:189]
2023-10-23 12:48:44:899 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:207].[@-1,60:64='start',<0>,40:212]
2023-10-23 12:48:44:900 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:232].[@-1,85:85='e',<0>,40:237]
2023-10-23 12:48:44:900 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:241].[@-1,92:95='text',<0>,40:244]
2023-10-23 12:48:44:900 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:251].[@-1,105:105='e',<0>,40:257]
2023-10-23 12:48:44:900 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-10-23 12:48:44:901 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-23 12:48:44:901 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:151]
2023-10-23 12:48:44:901 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:181].[@-1,37:41='start',<0>,41:186]
2023-10-23 12:48:44:902 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:204].[@-1,60:64='start',<0>,41:209]
2023-10-23 12:48:44:903 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:229].[@-1,85:85='e',<0>,41:234]
2023-10-23 12:48:44:903 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:238].[@-1,92:95='text',<0>,41:241]
2023-10-23 12:48:44:903 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:248].[@-1,105:105='e',<0>,41:254]
2023-10-23 12:48:44:903 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-10-23 12:48:44:904 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-23 12:48:44:905 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:129]
2023-10-23 12:48:44:905 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:159].[@-1,37:41='start',<0>,42:164]
2023-10-23 12:48:44:905 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:182].[@-1,60:64='start',<0>,42:187]
2023-10-23 12:48:44:905 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:207].[@-1,85:85='e',<0>,42:212]
2023-10-23 12:48:44:906 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:216].[@-1,92:95='text',<0>,42:219]
2023-10-23 12:48:44:906 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:226].[@-1,105:105='e',<0>,42:232]
2023-10-23 12:48:44:907 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-10-23 12:48:44:909 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-23 12:48:44:909 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:128]
2023-10-23 12:48:44:910 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:158].[@-1,37:41='start',<0>,43:163]
2023-10-23 12:48:44:910 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:181].[@-1,60:64='start',<0>,43:186]
2023-10-23 12:48:44:911 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:206].[@-1,85:85='e',<0>,43:211]
2023-10-23 12:48:44:911 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:215].[@-1,92:95='text',<0>,43:218]
2023-10-23 12:48:44:911 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:225].[@-1,105:105='e',<0>,43:231]
2023-10-23 12:48:44:916 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-10-23 12:48:44:917 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-10-23 12:48:44:917 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-10-23 12:48:44:917 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-10-23 12:48:44:917 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-10-23 12:48:44:917 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-23 12:48:44:917 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-10-23 12:48:44:917 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-10-23 12:48:44:917 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-10-23 12:48:44:919 action-translator LogManager.java:25 translate 
2023-10-23 12:48:44:920 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-23 12:48:44:920 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-23 12:48:44:920 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-23 12:48:44:920 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-23 12:48:44:920 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-23 12:48:44:922 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-23 12:48:44:922 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-10-23 12:48:44:922 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-10-23 12:48:44:924 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-10-23 12:48:44:926 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-10-23 12:48:44:926 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-23 12:48:44:928 action-translator LogManager.java:25 translate 
2023-10-23 12:48:44:929 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-23 12:48:44:929 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-23 12:48:44:930 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-23 12:48:44:930 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-23 12:48:44:930 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-23 12:48:44:930 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-23 12:48:44:931 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-10-23 12:48:44:931 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-10-23 12:48:44:931 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-10-23 12:48:44:932 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-10-23 12:48:44:933 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-23 12:48:44:936 action-translator LogManager.java:25 translate 
2023-10-23 12:48:44:937 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-10-23 12:48:44:937 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2023-10-23 12:48:44:943 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:63].[@-1,33:36='line',<0>,2:66]
2023-10-23 12:48:44:943 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:73].[@-1,43:45='pos',<0>,2:76]
2023-10-23 12:48:44:944 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:82].[@-1,52:55='text',<0>,2:85]
2023-10-23 12:48:44:944 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-10-23 12:48:44:950 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-10-23 12:48:44:950 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:130]
2023-10-23 12:48:44:950 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:162].[@-1,39:43='start',<0>,5:167]
2023-10-23 12:48:44:951 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:185].[@-1,62:66='start',<0>,5:190]
2023-10-23 12:48:44:953 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:210].[@-1,87:87='p',<0>,5:215]
2023-10-23 12:48:44:953 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:219].[@-1,96:96='e',<0>,5:224]
2023-10-23 12:48:44:954 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-23 12:48:44:955 action-translator LogManager.java:25 translate  $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  
2023-10-23 12:48:44:955 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:113]
2023-10-23 12:48:44:956 action-translator LogManager.java:25 qattr [@-1,35:38='list',<0>,6:146].[@-1,40:44='start',<0>,6:151]
2023-10-23 12:48:44:956 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,6:169].[@-1,63:67='start',<0>,6:174]
2023-10-23 12:48:44:957 action-translator LogManager.java:25 qattr [@-1,83:86='list',<0>,6:194].[@-1,88:88='p',<0>,6:199]
2023-10-23 12:48:44:957 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,6:203].[@-1,95:98='text',<0>,6:206]
2023-10-23 12:48:44:957 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-23 12:48:44:958 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-10-23 12:48:44:958 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,7:183]
2023-10-23 12:48:44:959 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,7:215].[@-1,39:43='start',<0>,7:220]
2023-10-23 12:48:44:959 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,7:238].[@-1,62:66='start',<0>,7:243]
2023-10-23 12:48:44:959 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,7:263].[@-1,87:87='p',<0>,7:268]
2023-10-23 12:48:44:960 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,7:272].[@-1,96:96='e',<0>,7:277]
2023-10-23 12:48:44:962 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-10-23 12:48:44:963 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-23 12:48:44:968 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-23 12:48:44:974 action-translator LogManager.java:25 translate 
2023-10-23 12:48:44:975 action-translator LogManager.java:25 translate  $t = $expr.e 
2023-10-23 12:48:44:975 action-translator LogManager.java:25 attr [@-1,2:2='t',<0>,2:37]
2023-10-23 12:48:44:975 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:42].[@-1,12:12='e',<0>,2:47]
2023-10-23 12:48:44:977 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-23 12:48:44:977 action-translator LogManager.java:25 translate  $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) 
2023-10-23 12:48:44:977 action-translator LogManager.java:25 attr [@-1,2:2='t',<0>,5:113]
2023-10-23 12:48:44:977 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,5:143].[@-1,37:41='start',<0>,5:148]
2023-10-23 12:48:44:978 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,5:166].[@-1,60:64='start',<0>,5:171]
2023-10-23 12:48:44:978 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,5:191].[@-1,85:85='t',<0>,5:196]
2023-10-23 12:48:44:978 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,5:200].[@-1,92:95='text',<0>,5:203]
2023-10-23 12:48:44:978 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,5:210].[@-1,105:105='e',<0>,5:216]
2023-10-23 12:48:44:978 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-23 12:48:47:026 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-23 12:48:47:026 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-23 12:48:47:186 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-10-23 12:48:47:187 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

